;;;;;;;;;;; BEHAVIOR TREE MODIFICATIONS ;;;;;;;;;;;;;;;;;;
[LW_Overhaul.UIScreenListener_Shell]
; panicked action adjustments
+BehaviorRemovals="Panicked_FirstAction_Selector"
+BehaviorRemovals="Panicked_LastAction_Selector"
+BehaviorRemovals="PanickedAction"

+NewBehaviors=(BehaviorName=Panicked_FirstAction_Selector, NodeType=Selector, Child[0]=PanickedAction, Child[1]=SkipMove)
+NewBehaviors=(BehaviorName=Panicked_LastAction_Selector, NodeType=Selector, Child[0]=PanickedAction, Child[1]=SkipMove)
+NewBehaviors=(BehaviorName=PanickedAction, NodeType=RandSelector, Child[0]=DoCower, Param[0]=499)

; Disable AI shooting with negative hit chances
+BehaviorRemovals="TargetScoreHitChance"

+NewBehaviors=(BehaviorName=TargetScoreHitChance, NodeType=Selector, Child[0]=TargetScoreHitChanceImpossible, Child[1]=TargetScoreHitChanceUnlikely, Child[2]=TargetScoreHitChanceProbable, Child[3]=AddToTargetScore_40)
+NewBehaviors=(BehaviorName=TargetScoreHitChanceImpossible, NodeType=Sequence, Child[0]=TargetHitChanceZero, Child[1]=AddToTargetScore_-1000)
; 0 or less chance to hit
+NewBehaviors=(BehaviorName=TargetHitChanceZero, NodeType=StatCondition, Param[0]=HitChance, Param[1]="<=", Param[2]="0")


; Trooper Last Resort Red Action fix
+BehaviorRemovals="AdvTrooper_RedAbilitySelector"
+NewBehaviors=(BehaviorName=AdvTrooper_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdventRedFirstAction, Child[2]=AdventRedLastAction, Child[3]=AdventRedFallbackAction)

; Captain Last Resort Red Action fix
+BehaviorRemovals="AdvCaptain_RedAbilitySelector"
+NewBehaviors=(BehaviorName=AdvCaptain_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdvCaptain_RedFirstAction, Child[2]=AdvCaptain_RedLastAction, Child[3]=AdventRedFallbackAction)

; Stun Lancer Last Resort Red Action fix
+NewBehaviors=(BehaviorName=TryWhirlwindPostStunLance, NodeType=Sequence, Child[0]=WasLastAbility-StunLance, Child[1]=FindStealthDestination_AvoidEnemy, Child[2]=SelectAbility-StandardMove)
+BehaviorRemovals="AdventSL_RedAbilitySelector"
+NewBehaviors=(BehaviorName=AdventSL_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdventSLFirstAction, Child[2]=AdventSLLastAction, Child[3]=TryWhirlwindPostStunLance, Child[4]=AdventRedFallbackAction)

; Make stun lance not target lost and edit scoring to target low HP instead of high HP
+BehaviorRemovals="EvaluateTargetForStunLance"
+NewBehaviors=(BehaviorName=EvaluateTargetForStunLance, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=IsVisibleToPlayer, Child[2]=TargetScoreHealth, Child[3]=TargetScoreMarked, Child[4]=AvoidBoundAndPanickedTargets, Child[5]=TargetScoreCivilian, Child[6]=SSTeamSpecificModifiers, Child[7]=SSScoreTargetOutIfLost)


; Shieldbearer Last Resort Red Action fix
+BehaviorRemovals="AdvShieldBearer_RedAbilitySelector"
+NewBehaviors=(BehaviorName=AdvShieldBearer_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ShieldBearerFirstAction, Child[2]=ShieldBearerLastAction, Child[3]=AdventRedFallbackAction)

; MEC Last Resort Red Action fix
+BehaviorRemovals="MECRedAbilitySelector"
+NewBehaviors=(BehaviorName=MECRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MECRedFirstAction, Child[2]=MECRedLastAction, Child[3]=MECRedFallbackAction)

+BehaviorRemovals="MECMk2RedAbilitySelector"
+NewBehaviors=(BehaviorName=MECMk2RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MECMk2RedFirstAction, Child[2]=MECMk2RedLastAction, Child[3]=MECRedFallbackAction)

; Muton Last Resort Red Action fix
+BehaviorRemovals="MutonRedAbilitySelector"
+NewBehaviors=(BehaviorName=MutonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MutonRedFirstAction, Child[2]=MutonRedLastAction, Child[3]=AlienRedFallbackAction)

; Viper
+BehaviorRemovals="ViperRedAbilitySelector"
+NewBehaviors=(BehaviorName=ViperRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ViperRedFirstAction, Child[2]=ViperRedLastAction, Child[3]=AlienRedFallbackAction)

; "GenericGreenMovement" - Only use green movement in green alert.
+BehaviorRemovals="GenericGreenMovement"
+NewBehaviors=(BehaviorName=GenericGreenMovement, NodeType=Sequence, Child[0]=IsGreenAlert, Child[1]=GreenAlertActionSelector)
; "CryssalidGreenAlert" - Only use green movement in green alert.
+BehaviorRemovals="ChryssalidGreenAlert"
+NewBehaviors=(BehaviorName=ChryssalidGreenAlert, NodeType=Sequence, Child[0]=IsGreenAlert, Child[1]=ChryssalidGreenAbilitySelector)

; "ScoreAlert_HeardNoise" - Base game scores the noise at +15 with an additional bonus of +10 for "scary" noises. Scary noises don't fire due to
; limitations in the system as written - the sound radius that it uses to determine "scariness" isn't recorded in the alert data. So just give a flat
; bonus for noise alerts to compensate (+25 instead of +15).
+BehaviorRemovals="ScoreAlert_HeardNoise"
+NewBehaviors=(BehaviorName=ScoreAlert_HeardNoise, NodeType=Sequence, Child[0]=AlertDataWasSoundMade, Child[1]=AddToAlertDataScore_25, Child[2]=IfAlertNoiseIsScary)

; "ConsiderTakingOverwatch" - Remove ConsiderTakingOverwatchEvac and ConsiderTakingOverwatchVIP. These tend to be abuseable
; as they are considered before evaluating just shooting, so the AI will frequently overwatch when a VIP or evac is visible
; even when they have a much better shot to take.
+BehaviorRemovals="ConsiderTakingOverwatch"
+NewBehaviors=(BehaviorName=ConsiderTakingOverwatch, NodeType=Selector, Child[0]=TryTwoTurnAttackSupport, Child[1]=ConsiderTakingOverwatchAllUnits)

; "GenericAIRoot" - Allow a chance to hunker (DoCower). Only used as a last resort before skipping a move.
+BehaviorRemovals="GenericAIRoot"
+NewBehaviors=(BehaviorName=GenericAIRoot, NodeType=Selector, Child[0]=TryNonAggressiveBehavior, Child[1]=TryMindControlledRoot, Child[2]="::CharacterRoot", Child[3]=RandOverwatch50, Child[4]=DoCower, Child[5]=SkipMove)

; "GenericScamperRoot" - If the unit is unable to find a valid scamper tile, try again with hazards turned off.
+BehaviorRemovals="GenericScamperRoot"
+NewBehaviors=(BehaviorName=GenericScamperRoot, NodeType=Selector,       Child[0]=CounterBeaglerushManeuver,  Child[1]=SniperDefense,    Child[2]=MoveStandardWithLoSUnsafe,       Child[3]=MoveStandardUnsafe, Child[4]=MoveStandardWithLoSUnsafeIgnoreHazards, Child[5]=MoveStandardUnsafeIgnoreHazards, Child[6]=SkipMove)

; "ScamperRoot_Naja" - naja scamper uses snipermove
+NewBehaviors=(BehaviorName=ScamperRoot_Naja, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=SniperDefense, Child[2]=SniperMove, Child[3]=MoveStandardWithLoSUnsafe, Child[4]=MoveStandardUnsafe, Child[5]=MoveStandardWithLoSUnsafeIgnoreHazards, Child[6]=MoveStandardUnsafeIgnoreHazards, Child[7]=SkipMove)

;Scamper root used by purifier
+NewBehaviors=(BehaviorName=ScamperRoot_Purifier, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=SniperDefense, Child[2]=MoveAggressiveUnsafe, Child[3]=HuntEnemyWithCover, Child[4]=SkipMove)

; "ScamperRoot_Warlock" - used by the chosen warlock
+NewBehaviors=(BehaviorName=ScamperRoot_ChosenWarlock, NodeType=Selector, Child[0]=CounterBeaglerushManeuver, Child[1]=TryChosenSummon, Child[2]=TryShieldAlly, Child[3]=MoveStandardWithLoSUnsafe, Child[4]=MoveStandardUnsafe, Child[5]=MoveStandardWithLoSUnsafeIgnoreHazards, Child[6]=MoveStandardUnsafeIgnoreHazards, Child[7]=SkipMove)

; "AvoidBoundAndPanickedTargets" - Add a uniform score bonus to all non-last-resort units (+25)
+BehaviorRemovals="AvoidBoundAndPanickedTargets"
+NewBehaviors=(BehaviorName=AvoidBoundAndPanickedTargets, NodeType=Selector, Child[0]=ScoreIfTargetBoundOrPanicked, Child[1]=AddToTargetScore_25)

; "ScoreIfTargetBoundOrPanicked" - Don't nuke last resort targets out of the list entirely: score them at +0 instead of
; -1000 as targets with a net negative total are never selected.
+BehaviorRemovals="ScoreIfTargetBoundOrPanicked"
+NewBehaviors=(BehaviorName=ScoreIfTargetBoundOrPanicked, NodeType=Sequence, Child[0]=IsTargetLastResortWithOtherOptionsAvailable, Child[1]=AddToTargetScore_0)

; Disables CBRM b/c green/yellow actions are sufficient
+BehaviorRemovals="CounterBeaglerushManeuver"
+NewBehaviors=(BehaviorName=CounterBeaglerushManeuver, NodeType=Failer, Child[0]=IsAbilityAvailable-StandardShot)

;Slightly deprioritize lost from general abilities
;+BehaviorRemovals="GenericTargetEvaluations"
;+NewBehaviors=(BehaviorName=GenericTargetEvaluations, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreFlanking, Child[3]=TargetScoreMarked, Child[4]=ApplyDifficultyModifiers, Child[5]=TargetScoreCivilian, Child[6]=AvoidBoundAndPanickedTargets, Child[7]=SSAvoidTargetIfLost)

;+NewBehaviors=(BehaviorName=SSAvoidTargetIfLost, NodeType=Successor, Child[0]=AvoidTargetIfLost)
;+NewBehaviors=(BehaviorName=AvoidTargetIfLost, NodeType=Sequence, Child[0]=IsTargetTeam-eTeam_TheLost, Child[1]=AddToTargetScore_-80)

+BehaviorRemovals="AdjustScoreForLostPriority"
+NewBehaviors=(BehaviorName=AdjustScoreForLostPriority, NodeType=Selector, Child[0]=ChosenScoreTargetOutIfLost, Child[1]=ChosenAvoidIfLost, Child[2]=LostPriorityScore, Child[3]=AddToTargetScore_-2000)
+BehaviorRemovals="LostPriorityScore"
+NewBehaviors=(BehaviorName=LostPriorityScore, NodeType=Sequence, Child[0]=ShouldPrioritizeTheLostTarget, Child[1]=SSAvoidBurning, Child[2]=TargetScoreByScaledDistance-1, Child[3]=AddToTargetScore_50)

; Burning avoidance to prevent AI from shooting Lost that Purifier just flamed unless there is no alternative
+NewBehaviors=(BehaviorName=SSAvoidBurning, NodeType=Successor, Child[0]=AvoidBurning)
+NewBehaviors=(BehaviorName=AvoidBurning, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Burning, Child[1]=AnyLivingEnemyVisible, Child[2]=AddToTargetScore_-1000)
+NewBehaviors=(BehaviorName=TargetAffectedByEffect-Burning, NodeType=Condition)

; Chosen heavily discouraged from shooting Lost
+NewBehaviors=(BehaviorName=ChosenScoreTargetOutIfLost, NodeType=Sequence, Child[0]=IsAbilityAvailable-CombatReadiness, Child[1]=NotLastActionPoint, Child[2]=AddToTargetScore_-2000)
+NewBehaviors=(BehaviorName=ChosenAvoidIfLost, NodeType=Sequence, Child[0]=IsAbilityAvailable-CombatReadiness, Child[1]=TargetScoreByScaledDistance-1, Child[2]=AddToTargetScore_-80)

;Make mark target not happen on lost
+BehaviorRemovals="ScoreMarkTargetOption"
+NewBehaviors=(BehaviorName=ScoreMarkTargetOption, NodeType=Sequence, Child[0]=TargetIsEnemy, Child[1]=TargetIsNotCivilian, Child[2]=ScoreByHP, Child[3]=TargetScoreHealth_HighFirst, Child[4]=TargetScoreHighestSoldierRank, Child[5]=TargetScoreTeamVisibility, Child[6]=SometimesRandomizeTarget, Child[7]=AvoidBoundAndPanickedTargets, Child[8]=SSTeamSpecificModifiers, Child[9]=SSScoreTargetOutIfLost)


; TryShootOrReloadOrOverwatch changes: Proceed as normal, but add a new node to the end such that if this is the last
; action point, force an overwatch if the ability is available. Intended to avoid double-moving units if they fail the
; random roll for overwatch. The sequence now is to try the overwatch roll, possibly just shoot, possibly reload (see below)
; and finally force an overwatch if we can. If overwatch isn't available we'll fail this node and try something else (probably
; move). Note that due to the first action node changes below we should usually not reload with this action if we are in
; last action point, we instead prefer to reload with the first action to avoid move-reload turns. This may still occur
; and is left in this node to handle cases where the unit does move, e.g. they're both flanked and out of ammo, they may
; move to get out of flank and then reload to be able to act next turn.
+BehaviorRemovals="TryShootOrReloadOrOverwatch"
+NewBehaviors=(BehaviorName=TryShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable, Child[2]=NeedsReload, Child[3]=TryOverwatchLastAction)

; First action updates: Move if flanked, then try to reload before moving. Helps to avoid move-reload turns, hopefully
; turning them into reload-shoot turns.
+BehaviorRemovals="AdventRedFirstActionSelector"
+NewBehaviors=(BehaviorName=AdventRedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove, Child[1]=NeedsReload, Child[2]=SelectMove_JobOrAggressive,      Child[3]=TryMoveThenGrenade,      Child[4]=TryShootOrReloadOrOverwatch,      Child[5]=HuntEnemyWithCover)
+BehaviorRemovals="AdvCaptain_RedFirstActionSelector"
+NewBehaviors=(BehaviorName=AdvCaptain_RedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TryMarkTargetOption,      Child[2]=NeedsReload, Child[3]=SelectMove_JobOrDefensive,      Child[4]=AdvCaptainTryMoveThenGrenade,      Child[5]=TryShootOrReloadOrOverwatch,      Child[6]=HuntEnemyWithCover)
+BehaviorRemovals="GenericRedFirstActionSelector"
+NewBehaviors=(BehaviorName=GenericRedFirstActionSelector, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=NeedsReload, Child[2]=SelectMoveStandard, Child[3]=TryShootOrReloadOrOverwatch, Child[4]=HuntEnemyWithCover)
+BehaviorRemovals="AggressiveRedFirstActionSelector"
+NewBehaviors=(BehaviorName=AggressiveRedFirstActionSelector, NodeType=Selector, Child[0]=AttackIfIdeal, Child[1]=DoIfFlankedMove, Child[2]=NeedsReload, Child[3]=SelectMove_JobOrAggressive, Child[4]=TryShootOrReloadOrOverwatch, Child[5]=HuntEnemy)
+BehaviorRemovals="GenericNoCoverFirstActionSelector"
+NewBehaviors=(BehaviorName=GenericNoCoverFirstActionSelector, NodeType=Selector, Child[0]=NeedsReload, Child[1]=SelectNCMove_JobOrFanatic, Child[2]=TryShootOrReloadOrOverwatch, Child[3]=HuntEnemy)
+BehaviorRemovals="MECFirstActionSelector"
+NewBehaviors=(BehaviorName=MECFirstActionSelector, NodeType=Selector,      Child[0]=TryMoveThenMicroMissiles,      Child[1]=NeedsReload, Child[2]=SelectNCMove_JobOrFanatic,      Child[3]=HuntEnemy,      Child[4]=TryShootOrReloadOrOverwatch)
+BehaviorRemovals="MECMk2FirstActionSelector"
+NewBehaviors=(BehaviorName=MECMk2FirstActionSelector, NodeType=Selector,      Child[0]=TryMoveThenMicroMissilesMk2, Child[1]=NeedsReload,     Child[2]=SelectNCMove_JobOrFanatic,      Child[3]=HuntEnemy,      Child[4]=TryShootOrReloadOrOverwatch)
+BehaviorRemovals="PsiWitchRedFirstActionSelector"
+NewBehaviors=(BehaviorName=PsiWitchRedFirstActionSelector, NodeType=Selector,      Child[0]=TryMoveThenPsiMindControl,      Child[1]=TryMoveThenDimensionalRift,      Child[2]=TryMoveThenNullLance,      Child[3]=DoIfFlankedMove,      Child[4]=NeedsReload, Child[5]=SelectMoveStandard,      Child[6]=PsiWitchAttackSequencer,      Child[7]=HuntEnemyWithCover,      Child[8]=TryShootOrReloadOrOverwatch)
+BehaviorRemovals="AndromedonRedFirstActionSelector"
+NewBehaviors=(BehaviorName=AndromedonRedFirstActionSelector, NodeType=Selector,      Child[0]=TryStandardMelee,      Child[1]=TryMoveThenAcidBlob,      Child[2]=DoIfFlankedMove,      Child[3]=NeedsReload, Child[4]=SelectMoveStandard,      Child[5]=TryShootOrReloadOrOverwatch,      Child[6]=HuntEnemyWithCover)
+BehaviorRemovals="ArchonFirstActionSelector"
+NewBehaviors=(BehaviorName=ArchonFirstActionSelector, NodeType=Selector,      Child[0]=TryFrenziedMoveAndAttack,      Child[1]=TryMoveThenBlazingPinions,      Child[2]=TryStandardMelee,      Child[3]=DoIfFlankedMove,      Child[4]=NeedsReload, Child[5]=SelectMoveStandard,      Child[6]=TryShootOrReloadOrOverwatch,      Child[7]=HuntEnemyWithCover)
+BehaviorRemovals="CodexRedFirstActionSelector"
+NewBehaviors=(BehaviorName=CodexRedFirstActionSelector, NodeType=Selector,      Child[0]=TryMoveThenPsiBomb,      Child[1]=DoIfFlankedMove_Teleport,      Child[2]=NeedsReload, Child[3]=TryTeleportDefensive,      Child[4]=SelectMove_JobOrFlanking,      Child[5]=TryShootOrReloadOrOverwatch,      Child[6]=HuntEnemyWithCover)
+BehaviorRemovals="MutonRedFirstActionSelector"
+NewBehaviors=(BehaviorName=MutonRedFirstActionSelector, NodeType=Selector,      Child[0]=TryBayonet,      Child[1]=TryMoveThenGrenade,      Child[2]=TryMoveToSuppressClosest,      Child[3]=TryTwoTurnAttackSupportIfSafe, Child[4]=NeedsReload,     Child[5]=SelectMoveProfileByJob,      Child[6]=TryShootOrReloadOrOverwatch,      Child[7]=HuntEnemyWithCover)
+BehaviorRemovals="SectoidRedFirstActionSelector"
+NewBehaviors=(BehaviorName=SectoidRedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove, Child[1]=NeedsReload,     Child[2]=SelectMove_JobOrDefensive,      Child[3]=TryShootFlanked50,      Child[4]=TryPsiReanimationOrMindSpinOption,      Child[5]=TryShootOrReloadOrOverwatch,      Child[6]=HuntEnemyWithCover)
+BehaviorRemovals="ViperRedFirstActionSelector"
+NewBehaviors=(BehaviorName=ViperRedFirstActionSelector, NodeType=Selector,      Child[0]=ConsiderTonguePullPriorityOrMelee,      Child[1]=TryGetOverHere,      Child[2]=TryMoveThenPoisonSpit,      Child[3]=TryMoveThenPoisonSpitSingle,      Child[4]=NeedsReload, Child[5]=SelectMoveStandard,      Child[6]=TryShootOrReloadOrOverwatch,      Child[7]=HuntEnemyWithCover)

; Check critical opportunities first before mark target for last action
+BehaviorRemovals="AdvCaptain_RedLastActionSelector"
+NewBehaviors=(BehaviorName=AdvCaptain_RedLastActionSelector, NodeType=Selector, Child[0]=AdvCaptainTryGrenade, Child[1]=TryHighPriorityShot, Child[2]=TryMarkTargetOption, Child[3]=TryShootOrReloadOrOverwatch, Child[4]=HuntEnemyWithCover, Child[5]=SelectMove_JobOrDefensive)

; Big one from Reshi: tweak melee targeting to check visiblity

+BehaviorRemovals="ScoreClosestEnemyIfInRange"
+BehaviorRemovals="EvaluatePotentialMeleeTarget"

+NewBehaviors=(BehaviorName=EvaluatePotentialMeleeTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=IsVisibleToPlayer, Child[2]=TargetScoreClosestIfInRange, Child[3]=AvoidBoundAndPanickedTargets, Child[4]=TargetScoreCivilian, Child[5]=SSCustomMeleeTargetScore, Child[6]=UpdateBestTarget)
+NewBehaviors=(BehaviorName=ScoreClosestEnemyIfInRange, NodeType=Sequence, Child[0]=TargetIsEnemy, Child[1]=IsVisibleToPlayer, Child[2]=TargetIsNotFacelessCivilian, Child[3]=IsTargetInMovementRange-StandardMelee, Child[4]=TargetScoreByScaledDistance-1, Child[5]=AddToTargetScore_100, Child[6]=AvoidBoundAndPanickedTargets)

; ----------------------------------------------------------------------------------------------------------
; --------------------------- ADVENT SHIELDBEARER --------------------------------------------------
; ---------------------------------------------------------------------------------------------------------- 
+BehaviorRemovals="ShieldBearerFirstActionSelector"
+NewBehaviors=(BehaviorName=ShieldBearerFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveForEnergyShield, \\
	Child[1]=DoIfFlankedMove, \\
	Child[2]=TryEnergyShieldOnMultipleTargets, \\
	Child[3]=TryHighPriorityShot, \\
	Child[4]=SelectMove_JobOrDefensive, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=TryShootOrReloadOrOverwatch)

+BehaviorRemovals="ShieldBearerLastActionSelector"
+NewBehaviors=(BehaviorName=ShieldBearerLastActionSelector, NodeType=Selector, \\
	Child[0]=TryEnergyShieldOnMultipleTargets, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryEnergyShieldOnAnyTarget, \\
	Child[3]=TryShootOrReloadOrOverwatch,  \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SelectMove_JobOrDefensive)

; ----------------------------------------------------------------------------------------------------------
; --------------------------- ADVENT SECTOPOD --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
+BehaviorRemovals="SectopodFirstActionSelector"
+NewBehaviors=(BehaviorName=SectopodFirstActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryStandUp,\\
	Child[2]=ShootWhenFlanking, \\
	Child[3]=NeedsReload, \\
	Child[4]=TryMoveForLightningField, \\
	Child[5]=TakePriorityShotsChosen, \\
	Child[6]=MoveNoCover, \\
	Child[7]=TryShootOrReload, \\
	Child[8]=HuntEnemy)

+BehaviorRemovals="SectopodSecondActionSelector"
+NewBehaviors=(BehaviorName=SectopodSecondActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryStandUp,\\
	Child[2]=TrySmartLightningField, \\
	Child[3]=ShootWhenFlanking, \\
	Child[4]=NeedsReload, \\
	Child[5]=TryMoveForLightningField, \\
	Child[6]=MoveNoCoverIfNotMoved, \\
	Child[7]=TryShootOrReload, \\
	Child[8]=HuntEnemy)

+BehaviorRemovals="SectopodRedLastActionSelector"
+NewBehaviors=(BehaviorName=SectopodRedLastActionSelector, NodeType=Selector, \\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TrySmartLightningField, \\
	Child[2]=ShootWhenFlanking, \\
	Child[3]=TryWrathCannonS1, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemy)

; variable to check lightning field is used only after TryMoveForLightningField targeting
+NewBehaviors=(BehaviorName=SetLightningFieldOff, NodeType=Action, Param[0]=SetUnitValue, Param[1]="LightningFieldSwitch", Param[2]="1")	
+NewBehaviors=(BehaviorName=SetLightningFieldOn, NodeType=Action, Param[0]=SetUnitValue, Param[1]="LightningFieldSwitch", Param[2]="2")
+NewBehaviors=(BehaviorName=IsLightningFieldOn, NodeType=StatCondition, Param[0]=UnitValue-LightningFieldSwitch, Param[1]="==", Param[2]="2")
+NewBehaviors=(BehaviorName=IsTargetInMovementRange-SectopodLightningField, NodeType=Condition)

+BehaviorRemovals="TryMoveForLightningField"
+NewBehaviors=(BehaviorName=TryMoveForLightningField, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=SafeToMove, Child[2]=IsAbilityReady-SectopodLightningField, Child[3]=MoveStandardIfFirstAbility-LightningField, Child[4]=SetLightningFieldOn)
; bunch of movement profile changes so FindRestrictedDestination doesn't fail due to negative scoring
+BehaviorRemovals="FindLightningFieldDestination"
+NewBehaviors=(BehaviorName=FindLightningFieldDestination, NodeType=Sequence, Child[0]=SelectTargetForLightningField_LW, Child[1]=ResetDestinationSearch, Child[2]=RestrictToAbilityRange-SectopodLightningField, Child[3]=RestrictToEnemyLoS, Child[4]=OverrideIdealRange-3, Child[5]=FindRestrictedDestination-MWP_Fanatic)
+NewBehaviors=(BehaviorName=SelectTargetForLightningField_LW, NodeType=Sequence, Child[0]=SetPotentialTargetStack, Child[1]=SelectBestPotentialTargetForLightningField, Child[2]=HasValidTarget-Potential)
+NewBehaviors=(BehaviorName=SelectBestPotentialTargetForLightningField, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialLightningFieldTarget)
+NewBehaviors=(BehaviorName=EvaluatePotentialLightningFieldTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestLF, Child[2]=TargetScoreCivilian, Child[3]=SSCustomMeleeTargetScore, Child[4]=UpdateBestTarget)
+NewBehaviors=(BehaviorName=TargetScoreClosestLF, NodeType=Successor, Child[0]=ScoreClosestLF)
+NewBehaviors=(BehaviorName=ScoreClosestLF, NodeType=Sequence, Child[0]=TargetIsClosestValidTarget, Child[1]=IsTargetInMovementRange-SectopodLightningField, Child[2]=AddToTargetScore_500)

;+BehaviorRemovals="TryLightningField"



+NewBehaviors=(BehaviorName=TrySmartLightningField, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=IsAbilityAvailable-SectopodLightningField, Child[2]=SelectNearestUnconcealedTarget, Child[3]=TargetWithinLightningFieldRange, Child[4]=SelectAbility-SectopodLightningField)
+NewBehaviors=(BehaviorName=TargetWithinLightningFieldRange, NodeType=StatCondition, Param[0]=PotentialTargetDistance, Param[1]="<", Param[2]=6)
; ----------------------------------------------------------------------------------------------------------
; --------------------------- ADVENT PURIFIER --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------



+NewBehaviors=(BehaviorName=PurifierRedLastActionSelector, NodeType=Selector, \\
	Child[0]=FlameThrowerPriorityOption, \\
	Child[1]=TryFlameThrower, \\
	Child[2]=TryHighPriorityShot, \\
	Child[3]=MoveVeryAggressiveUnsafe, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)
+NewBehaviors=(BehaviorName=PurifierRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=FlameThrowerPriorityOption, \\
	Child[1]=TryFlameThrower, \\
	Child[2]=MoveVeryAggressiveUnsafe, \\
	Child[3]=HuntEnemyWithCover)
+NewBehaviors=(BehaviorName=PurifierRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=PurifierRedLastActionSelector)
+NewBehaviors=(BehaviorName=PurifierRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=PurifierRedFirstActionSelector)

+BehaviorRemovals="SelectPurifierAbility"
+NewBehaviors=(BehaviorName=SelectPurifierAbility, NodeType=Selector, Child[0]=MimicBeaconBehavior,   Child[1]=PurifierRedFirstAction, Child[2]=PurifierRedLastAction, Child[3]=AdventRedFallbackAction)

-AoEProfiles=( Profile=FlameThrowerMultiProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=2, bAreaSearchSpace=1, bRequireLoS=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerAdjacent, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerIgnoreFF, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerMimicBeacon, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bTargetEnemy=0, bAreaSearchSpace=1, bRequireLoS=1, bRequirePotentialTarget=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerMimicBeaconAdjacent, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bTargetEnemy=0, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bRequirePotentialTarget=1, bIgnoreRepeatAttackList=1)

+AoEProfiles=( Profile=FlameThrowerMultiProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=2, bAreaSearchSpace=1, bRequireLoS=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerAdjacent, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1,)
+AoEProfiles=( Profile=FlameThrowerIgnoreFF, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1,)
+AoEProfiles=( Profile=FlameThrowerMimicBeacon, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bTargetEnemy=0, bAreaSearchSpace=1, bRequireLoS=1, bRequirePotentialTarget=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerMimicBeaconAdjacent, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bTargetEnemy=0, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bRequirePotentialTarget=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1)

; ----------------------------------------------------------------------------------------------------------
; --------------------------- ADVENT Priest --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
+NewBehaviors=(BehaviorName=PriestRedFirstActionSelector, NodeType=Selector, \\
Child[0]=DoIfFlankedMove, \\
Child[1]=RandSelectFromPriestAbilities, \\
Child[2]=TryHighPriorityShot, \\
Child[3]=TryPsiMindControl, \\
Child[4]=TryShootOrReloadOrOverwatch, \\
Child[5]=HuntEnemyWithCover)

+NewBehaviors=(BehaviorName=PriestRedLastActionSelector, NodeType=Selector, \\
Child[0]=TryPsiMindControl, \\
Child[1]=TryHighPriorityShot, \\
Child[2]=RandSelectFromPriestAbilities, \\
Child[3]=TryShootOrReloadOrOverwatch, \\
Child[4]=HuntEnemyWithCover)

+NewBehaviors=(BehaviorName=PriestRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=PriestRedFirstActionSelector)
+NewBehaviors=(BehaviorName=PriestRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=PriestRedLastActionSelector)

+BehaviorRemovals="RandSelectFromPriestAbilities"
+NewBehaviors=(BehaviorName=RandSelectFromPriestAbilities, NodeType=RandSelector, Child[0]=TryStasis, Param[0]=50, Child[1]=TryHolyWarrior, Param[1]=50)

+BehaviorRemovals="SelectPriestAbility"
+NewBehaviors=(BehaviorName=SelectPriestAbility, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=PriestRedFirstAction, Child[2]=PriestRedLastAction, Child[3]=AdventRedFallbackAction)

+NewBehaviors=(BehaviorName=TargetAffectedByEffect-TransferMecToOutpost, NodeType=Condition)
+NewBehaviors=(BehaviorName=TargetScoreByScaledDistance, NodeType=Action, Param[0]="1")
+NewBehaviors=(BehaviorName=ScoreTargetIfMindControlledPositive, NodeType=Sequence, Child[0]=TargetAffectedByEffect-MindControl, Child[1]=AddToTargetScore_500)
+NewBehaviors=(BehaviorName=ScoreTargetIfFullOverridden, NodeType=Sequence, Child[0]=TargetAffectedByEffect-TransferMecToOutpost, Child[1]=AddToTargetScore_-1000)
+NewBehaviors=(BehaviorName=AvoidKillableOrFlanked, NodeType=Sequence, Child[0]=TargetKillableOrFlanked, Child[1]=AddToTargetScore_-1000)
+NewBehaviors=(BehaviorName=PrioritizeNotTakeCover, NodeType=Sequence, Child[0]=TargetDoesNotTakeCover, Child[1]=AddToTargetScore_30)

+NewBehaviors=(BehaviorName=SSScoreTargetIfMindControlledPositive, NodeType=Successor, Child[0]=ScoreTargetIfMindControlledPositive)
+NewBehaviors=(BehaviorName=SSScoreTargetIfFullOverridden, NodeType=Successor, Child[0]=ScoreTargetIfFullOverridden)
+NewBehaviors=(BehaviorName=SSAvoidKillableOrFlanked, NodeType=Successor, Child[0]=AvoidKillableOrFlanked)
+NewBehaviors=(BehaviorName=SSPrioritizeNotTakeCover, NodeType=Successor, Child[0]=PrioritizeNotTakeCover)

+BehaviorRemovals="EvaluateForStasis"
+NewBehaviors=(BehaviorName=EvaluateForStasis, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamResistance, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=TargetScoreByScaledDistance, Child[7]=AddToTargetScore_-7, Child[8]=SSScoreTargetIfMindControlledPositive, Child[9]=SSScoreTargetIfFullOverridden, Child[10]=SSAvoidKillableOrFlanked, Child[11]=SSPrioritizeNotTakeCover)

+NewBehaviors=(BehaviorName=TargetHitChanceNotHigh, NodeType=Inverter, Child[0]=TargetHitChanceHigh)
+NewBehaviors=(BehaviorName=AttemptOnlyIfChanceIsHigh, NodeType=Sequence, Child[0]=TargetHitChanceNotHigh, Child[1]=AddToTargetScore_-1000)
+NewBehaviors=(BehaviorName=SSAttemptOnlyIfChanceIsHigh, NodeType=Successor, Child[0]=AttemptOnlyIfChanceIsHigh)

;Technically avatars also use this tree, but their psi is so high that the change does literally nothing for them
+BehaviorRemovals="PsiEvaluateTargetsMindControl"
+NewBehaviors=(BehaviorName=PsiEvaluateTargetsMindControl, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreMindControl, Child[2]=TargetScoreHighestSoldierRank, Child[3]=TargetScoreHealth_HighFirst, Child[4]=TargetScoreInvalidateCivilians, Child[5]=AvoidBoundAndPanickedTargets, Child[6]=SSAttemptOnlyIfChanceIsHigh, Child[7]=UpdateBestTarget)

+NewBehaviors=(BehaviorName=MindControlAllyCheck, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">=", Param[2]=2)
+NewBehaviors=(BehaviorName=MindControlHPThreshold, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="50%")

+BehaviorRemovals="TryPsiMindControl"
+NewBehaviors=(BehaviorName=TryPsiMindControl, NodeType=Sequence, Child[0]=IsAbilityAvailable-PsiMindControl, Child[1]=MindControlAllyCheck, Child[2]=MindControlHPThreshold, Child[3]=SelectTargetForPsiMindControl, Child[4]=SelectAbility-PsiMindControl)

; ----------------------------------------------------------------------------------------------------------
; --------------------------- ADVENT SPECTRE --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------


+NewBehaviors=(BehaviorName=ShadowbindHPThreshold, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="50%")
+NewBehaviors=(BehaviorName=ShadowbindAllyCheck, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">=", Param[2]=2)

+NewBehaviors=(BehaviorName=HorrorHPThreshold, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]="<=", Param[2]="70%")

+BehaviorRemovals="TryShadowbind"
+NewBehaviors=(BehaviorName=TryShadowbind, NodeType=Sequence, Child[0]=IsAbilityAvailable-Shadowbind, Child[1]=SetTargetStack-Shadowbind, Child[2]=SelectNLREnemyTargetRandomly, Child[3]=HasValidTarget-Shadowbind, Child[4]=SelectRevealedShadowbindOption)

+BehaviorRemovals="TryShadowbindIfNotLastAction"
+NewBehaviors=(BehaviorName=TryShadowbindIfNotLastAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ShadowbindHPThreshold, Child[2]=ShadowbindAllyCheck, Child[3]=TryShadowbind)

; allow Spectre to use Horror even without successful Shadowbound copy
+BehaviorRemovals="TryMoveThenHorror"
+NewBehaviors=(BehaviorName=TryMoveThenHorror, NodeType=Sequence, Child[0]=HorrorHPThreshold, Child[1]=HorrorMoveIfFirstAction, Child[2]=TryHorror)

+BehaviorRemovals="SpectreStealthSelector"
+NewBehaviors=(BehaviorName=SpectreStealthSelector, NodeType=Selector, \\
	Child[0]=AdvanceCoverIfNoEnemiesVisible, \\
	Child[1]=PostVanishMovement, \\
	Child[2]=TryHighPriorityShot, \\
	Child[3]=TryShadowbindIfNotActive, \\
	Child[4]=TryMoveThenHorror, \\
	Child[5]=AdvanceCoverMove, \\
	Child[6]=DoIfFlankedMove, \\
	Child[7]=TryShootOrReloadOrOverwatch, \\
	Child[8]=HuntEnemyWithCover)

+BehaviorRemovals="SpectreVisibleSelector"
+NewBehaviors=(BehaviorName=SpectreVisibleSelector, NodeType=Selector, \\
			Child[0]=PostShadowbindMove, \\
			Child[1]=TryHighPriorityShot, \\
			Child[2]=TryShadowbindIfNotActive, \\
			Child[3]=TryVanish, \\
			Child[4]=TryMoveThenHorror, \\
			Child[5]=TryShootOrReloadOrOverwatch, \\
			Child[6]=HuntEnemyWithCover)

;;;;;;;;;;; END BEHAVIOR TREE MODIFICATIONS ;;;;;;;;;;;;;;;;;;

[XComGame.XGAIPlayer_TheLost]
; Give Lost an equal chance to attack XCOM or the aliens
DistributionPercentToXCom=60

[XComGame.XComGameState_AIGroup]
+FallbackExclusionList=HiveQueen
+FallbackExclusionList=ChryssalidSoldier
;Removing chosen from this is useful for debugging
+FallbackExclusionList=ChosenSniperM1
+FallbackExclusionList=ChosenSniperM2
+FallbackExclusionList=ChosenSniperM3
+FallbackExclusionList=ChosenSniperM4
+FallbackExclusionList=ChosenSniperM5
+FallbackExclusionList=ChosenWarlockM1
+FallbackExclusionList=ChosenWarlockM2
+FallbackExclusionList=ChosenWarlockM3
+FallbackExclusionList=ChosenWarlockM4
+FallbackExclusionList=ChosenWarlockM5
+FallbackExclusionList=ChosenAssassinM1
+FallbackExclusionList=ChosenAssassinM2
+FallbackExclusionList=ChosenAssassinM3
+FallbackExclusionList=ChosenAssassinM4
+FallbackExclusionList=ChosenAssassinM5
+FallbackExclusionList=AndromedonRobot


[XComGame.XComGameState_AIPlayerData]
DownThrottleUnitCount = 999 ; Number of enemies engaged to activate Down Throttling. DISABLED
UpThrottleTurnCount = 9999  ; Number of turns to pass before activating Up Throttling. DISABLED
DownThrottleGroupRange = 10; Distance (meters) in which any non-engaged groups will be steered away as part of the Down Throttling effects.
RetreatCap = -1			   ; Max number of units that can fall back to the objective area (or nearest guard group).  -1 == no limit.

MaxEngagedEnemies[0] = 12   ; Rookie
MaxEngagedEnemies[1] = -1   ; Veteran
MaxEngagedEnemies[2] = -1  ; Commander
MaxEngagedEnemies[3] = -1  ; Legend

[XComGame.XGAIBehavior]
DefaultIdealRange=14.0f
CURR_TILE_LINGER_PENALTY=1.00			; Multiplier on current location distance score to lower the value of the current tile and promote movement.
CALC_RANGE_LINEAR_DENOM=32 ;			CurrentTileScore value =  (1 - |DTE-IR|/CALC_RANGE_LINEAR_DENOM).
										; LW notes -- this is in meters. if current range exceeds ideal range by more than this amount, then tile modifier will go negative
										; increasing from base-game 16 to 32
CALC_NO_COVER_FACTOR=-6.0f				; Used in weighting each cover location.  One location can have different cover values
CALC_MID_COVER_FACTOR=1.0f				; depending on multiple enemy positions around that location.  On one side it can have full
CALC_FULL_COVER_FACTOR=4.0f				; cover to one enemy, another side can have no cover.  CoverScore= avg of all cover values per known enemy.
CALC_FULL_COVER_FACTOR_POD_LEADER=4.5f	;  Leaders of groups will prioritize full cover to a greater degree.
DEFAULT_AI_MIN_SPREAD_DISTANCE=6.0f		; default distance (meters) from teammates to prefer to stay away.  Should be about double an AoE radius.
DEFAULT_AI_SPREAD_WEIGHT_MULTIPLIER=0.75f ;destination scores get multiplied by this value for tile locations adjacent to teammates.
MIN_SURPRISED_SCAMPER_PATH_LENGTH=3		; Scamper paths will never be cut short less than this number of tiles.
										; (A surprised scampering unit that has its best cover destination within this number of tiles will get into cover)
MAX_SURPRISED_SCAMPER_PATH_LENGTH=7		; Scamper paths longer than this number of tiles will be cut to this number of tiles.
										; Scamper paths less than the max will be cut short randomly between the min and the max values here.


; AOE profiles are needed for the AI to perform any targeting with an AoE ability
+AoEProfiles=( Profile=RocketLauncherProfile, Ability=RocketLauncher, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=RocketLauncherSingleProfile, Ability=RocketLauncher, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=RocketLauncherAggressiveProfile, Ability=RocketLauncher, bUsePrecomputePath=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeLauncherProfile, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, bRequireLoS=1)
+AoEProfiles=( Profile=GrenadeLauncherSingleProfile, Ability=LaunchGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1, MinTargets=1, bRequireLoS=1)
+AoEProfiles=( Profile=MassReanimation_LWManyProfile, Ability=MassReanimation_LW, bTargetEnemy=0, bTargetCivilians=0, bTargetCorpses=1, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=4, bRequireLoS=1)
+AoEProfiles=( Profile=MassReanimation_LWFewProfile, Ability=MassReanimation_LW, bTargetEnemy=0, bTargetCivilians=0, bTargetCorpses=1, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=2, bRequireLoS=1)
+AoEProfiles=( Profile=MassMindspinManyProfile, Ability=MassMindspin, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=3, bRequireLoS=1)
+AoEProfiles=( Profile=MassMindspinFewProfile, Ability=MassMindspin, bFailOnObjectiveFire=0, bFailOnFriendlyFire=0, MinTargets=1, bRequireLoS=1)

; Make Micro Missiles require line of sight so they can't be used through walls
-AoEProfiles=( Profile=MicroMissilesProfile, bUsePrecomputePath=1, Ability=MicroMissiles)
-AoEProfiles=( Profile=MicroMissilesProfileMk2, bUsePrecomputePath=1, Ability=MicroMissiles, MinTargets=1)

+AoEProfiles=( Profile=MicroMissilesProfile, bUsePrecomputePath=1, Ability=MicroMissiles, bRequireLoS=1)
+AoEProfiles=( Profile=MicroMissilesProfileMk2, bUsePrecomputePath=1, Ability=MicroMissiles, MinTargets=1, bRequireLoS=1)

;Make poison spit targetting ignore units and require LoS
-AoEProfiles=( Profile=PoisonSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1)
-AoEProfiles=( Profile=PoisonSpitSingleProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1)

+AoEProfiles=( Profile=PoisonSpitProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, bTestTargetEffectsApply=true, bRequireLoS=1)
+AoEProfiles=( Profile=PoisonSpitSingleProfile, Ability=PoisonSpit, bIgnoreSelfDamage=1, MinTargets=1, bTestTargetEffectsApply=true, bRequireLoS=1)

;Make purifiers not poison spit enemies
-AoEProfiles=( Profile=FlameThrowerMultiProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=2, bAreaSearchSpace=1, bRequireLoS=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerAdjacent, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerIgnoreFF, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerMimicBeacon, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bTargetEnemy=0, bAreaSearchSpace=1, bRequireLoS=1, bRequirePotentialTarget=1, bIgnoreRepeatAttackList=1)
-AoEProfiles=( Profile=FlameThrowerMimicBeaconAdjacent, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bTargetEnemy=0, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bRequirePotentialTarget=1, bIgnoreRepeatAttackList=1)

+AoEProfiles=( Profile=FlameThrowerMultiProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=2, bAreaSearchSpace=1, bRequireLoS=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerProfile, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerAdjacent, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=true, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerIgnoreFF, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerMimicBeacon, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bTargetEnemy=0, bAreaSearchSpace=1, bRequireLoS=1, bRequirePotentialTarget=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1)
+AoEProfiles=( Profile=FlameThrowerMimicBeaconAdjacent, Ability=AdvPurifierFlamethrower, bIgnoreSelfDamage=True, bFailOnObjectiveFire=true, bFailOnFriendlyFire=false, MinTargets=1, bTargetEnemy=0, bAreaSearchSpace=1, bRequireLoS=1, bCountAdjacentAsHits=1, bRequirePotentialTarget=1, bTestTargetEffectsApply=true, bIgnoreRepeatAttackList=1)


; ***                                           MOVEMENT PROFILES                                                   ***

; defensive SniperMove profile, seeks 15-18 tile distance with safe visibility if no target
+m_arrMoveWeightProfile=(Profile=SniperMove, fCoverWeight=0.0f, fDistanceWeight=1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=0.5, fAllyVisWeight=0.4f, fCloseModifier=0.2f, fFarModifier=2.4f)

; change fallback to inverse weight distance to prefer positions that are further away
-m_arrMoveWeightProfile=(Profile=Fallback, fCoverWeight=3.0f, fDistanceWeight=0.0f, fFlankingWeight=0.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=0.9f, fFarModifier=1.1f)
+m_arrMoveWeightProfile=(Profile=Fallback, fCoverWeight=3.0f, fDistanceWeight=-1.0f, fFlankingWeight=0.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=0.9f, fFarModifier=1.1f)

; fallback lower cover deweights cover in favor of distance, allowing selection of partial cover (if in full cover now) if it is further away
+m_arrMoveWeightProfile=(Profile=FallbackLowerCover, fCoverWeight=0.02f, fDistanceWeight=-10.0f, fFlankingWeight=0.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=0.9f, fFarModifier=1.1f)

;Juggernaut-like movement, used by purifier
+m_arrMoveWeightProfile=(Profile=MWP_VeryAggressive, fCoverWeight=0.1f, fDistanceWeight=10.0f, fFlankingWeight=0.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=0.0, fAllyVisWeight=0.0f, fCloseModifier=5.0f, fFarModifier=0.5f)

+m_arrMoveWeightProfile=(Profile=MWP_HunterFlanking, fCoverWeight=1.0f, fDistanceWeight=2.0f, fFlankingWeight=7.5f, fEnemyVisWeight=0.5f, fEnemyVisWeightPeak1=0.0, fAllyVisWeight=0.2f, fCloseModifier=0.9f, fFarModifier=1.1f)

+m_arrMoveWeightProfile=(Profile=MWP_HunterForceFlank, fCoverWeight=0.5f, fDistanceWeight=5.0f, fFlankingWeight=10.0f, fEnemyVisWeight=1.0f, fEnemyVisWeightPeak1=0.0, fAllyVisWeight=0.0f, fCloseModifier=0.9f, fFarModifier=1.1f)


+m_arrMoveWeightProfile=(Profile=MWP_HunterAggressive, fCoverWeight=1.1f, fDistanceWeight=6.0f, fFlankingWeight=5.0f, fEnemyVisWeight=1.5f, fEnemyVisWeightPeak1=1.0, fAllyVisWeight=0.0f, fCloseModifier=4.0f, fFarModifier=0.8f)


+m_arrMoveWeightProfile=(Profile=MWP_GrappleAway, fCoverWeight=2.0f, fDistanceWeight=2.0f, fFlankingWeight=1.0f, fEnemyVisWeight=0.1f, fEnemyVisWeightPeak1=1.0f, fAllyVisWeight=0, fHeightWeight=1.5f, fCloseModifier=1.0f, fFarModifier=1.0f)
+m_arrMoveWeightProfile=(Profile=ChosenStayBack, fCoverWeight=2.0f, fDistanceWeight=0.6f, fFlankingWeight=0.1f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=0.3f, fHeightWeight=3.0f, fCloseModifier=0.6f, fFarModifier=2f) 

; Chosen prime fallback profile prioritize cover and minimizing visibility to one, while seeking ideal distance and allies
+m_arrMoveWeightProfile=(Profile=ChosenPrimeFallback, fCoverWeight=8.0f, fDistanceWeight=0.5f, fFlankingWeight=0.0f, fEnemyVisWeight=-1.0f, fEnemyVisWeightPeak1=0.8, fAllyVisWeight=0.5f, fCloseModifier=0.9f, fFarModifier=1.1f)

[XComGame.XGAIPlayer]
; The DLC introduces more last-resort target effects which can mean vastly different AI behaviors between games with the
; DLC enabled and those without. Add those effects here (except 'Freeze', which only exists with the DLC anyway). BT
; mods above change the effect of these effects on the alien AI so that they're de-prioritized but not excluded entirely.
+LastResortTargetEffects=(EffectName="Stunned")
+LastResortTargetEffects=(EffectName="Unconscious")
+LastResortTargetEffects=(EffectName="Suppressed")

[XComGame.X2AIBTBehaviorTree]
-EquivalentAbilities=( KeyName=StandardShot, EquivalentAbilityName[0]=PistolStandardShot, EquivalentAbilityName[1]=AnimaGate, EquivalentAbilityName[2]=BlasterDuringCannon, EquivalentAbilityName[3]=StandardShot_NoEnd, EquivalentAbilityName[4]=Blaster, EquivalentAbilityName[5]=SniperStandardFire)
+EquivalentAbilities=( KeyName=StandardShot, EquivalentAbilityName[0]=AnimaGate, EquivalentAbilityName[1]=BlasterDuringCannon, EquivalentAbilityName[2]=StandardShot_NoEnd, EquivalentAbilityName[3]=Blaster, EquivalentAbilityName[4]=SniperStandardFire, EquivalentAbilityName[5]=LightEmUp, EquivalentAbilityName[6]=PistolStandardShot)

+EquivalentAbilities=(KeyName=StandardMelee, EquivalentAbilityName[0]=ChryssalidSoldierSlash, EquivalentAbilityName[1]=HiveQueenSlash)

+CustomNodes=(NodeTypeString="LWAction", ExtendsFromType="Action", ClassName="LW_Overhaul.X2AIBehavior_LW")
; +CustomNodes=(NodeTypeString="DLC3Action", ExtendsFromType="Action", ClassName="DLC_3.X2AIBT_DLC_90Actions")

; Added new behaviors
+Behaviors=(BehaviorName=SetBestTargetAsCurrentTarget-StandardShot, NodeType=Action)
+Behaviors=(BehaviorName=FindDestinationWithLoS-MWP_VeryAggressive, NodeType=Action)
+Behaviors=(BehaviorName=MoveVeryAggressiveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-MWP_VeryAggressive, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SelectNearestUnconcealedTarget, NodeType=Action)

; Change the AI flanking condition to exclude shields

+Behaviors=(BehaviorName=TargetAffectedByEffect-SimulatedCover, NodeType=Condition)
+Behaviors=(BehaviorName=TargetHasNoShield, NodeType=Inverter, Child[0]=TargetAffectedByEffect-SimulatedCover)

+Behaviors=(BehaviorName=IsFlankingTargetWithoutShield, NodeType=Sequence, Child[0]=TargetHasNoShield, Child[1]=IsFlankingTarget)
-Behaviors=(BehaviorName=ScoreTargetIfFlanked, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=AddToTargetScore_50)
+Behaviors=(BehaviorName=ScoreTargetIfFlanked, NodeType=Sequence, Child[0]=IsFlankingTargetWithoutShield, Child[1]=TargetIsEnemy, Child[2]=AddToTargetScore_50)

-Behaviors=(BehaviorName=ScoreFlankedEnemy, NodeType=Sequence, Child[0]=IsTargetScamperInstigator, Child[1]=WasTargetPreviouslyConcealed, Child[2]=NotActiveTeamXCom, Child[3]=IsFlankingTarget, Child[4]=TargetIsEnemy, Child[5]=TargetNotMindControlled, Child[6]=TargetNotBoundOrPanicked, Child[7]=GenericTargetEvaluations)
+Behaviors=(BehaviorName=ScoreFlankedEnemy, NodeType=Sequence, Child[0]=IsTargetScamperInstigator, Child[1]=WasTargetPreviouslyConcealed, Child[2]=NotActiveTeamXCom, Child[3]=IsFlankingTargetWithoutShield, Child[4]=TargetIsEnemy, Child[5]=TargetNotMindControlled, Child[6]=TargetNotBoundOrPanicked, Child[7]=GenericTargetEvaluations)

-Behaviors=(BehaviorName=ScoreFlanked, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetIsNotCivilian, Child[3]=TargetNotBoundOrPanicked, Child[4]=GenericTargetEvaluations)
+Behaviors=(BehaviorName=ScoreFlanked, NodeType=Sequence, Child[0]=IsFlankingTargetWithoutShield, Child[1]=TargetIsEnemy, Child[2]=TargetIsNotCivilian, Child[3]=TargetNotBoundOrPanicked, Child[4]=GenericTargetEvaluations)

; -------------------- Falling Back Entity -----------------------------------------
+Behaviors=(BehaviorName=FallBackRoot, NodeType=Selector, Child[0]=FallBack, Child[1]=FallBackWithLoSUnsafe, Child[2]=MoveDefensiveUnsafe, Child[3]=DoCower, Child[4]=SkipMove)

; Flush and Roust perks
+Behaviors=(BehaviorName=FlushRoot, NodeType=Selector, Child[0]=FallBackUnsafe, Child[1]=FallBackLowerCoverUnsafe, Child[2]=MoveRandomUnsafe)

+Behaviors=(BehaviorName=FallBackLowerCoverUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindBestFallbackLowerCoverDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindBestFallbackLowerCoverDestination, NodeType=Selector, Child[0]=FindDestination-FallBackLowerCover)
+Behaviors=(BehaviorName=FindDestination-FallBackLowerCover, NodeType=Action)

; Anti-Squadsight cheese behavior
-Behaviors=(BehaviorName=TrySelectYellowAlertAction, NodeType=Selector, Child[0]=TryAttackPriorityTarget, Child[1]=YellowAlertMove)
+Behaviors=(BehaviorName=TrySelectYellowAlertAction, NodeType=Selector, Child[0]=TryAttackPriorityTarget, Child[1]=SniperDefense, Child[2]=YellowAlertMove)

; Fix for enemies attacking units on yellow alert (like Najas and Berserkers on Intel Raids)
-Behaviors=(BehaviorName=SelectPriorityTargetForStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=SelectPriorityTarget, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=SelectPriorityTargetForStandardShot, NodeType=Sequence, Child[0]=SetPriorityTargetStack-StandardShot, Child[1]=SelectPriorityTarget, Child[2]=HasValidTarget-StandardShot)

-Behaviors=(BehaviorName=MeleeAttackPriorityTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMelee, Child[1]=SetTargetStack-StandardMelee, Child[2]=SelectPriorityTarget, Child[3]=HasValidTarget-StandardMelee, Child[4]=SelectAbility-StandardMelee)
+Behaviors=(BehaviorName=MeleeAttackPriorityTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMelee, Child[1]=SetPriorityTargetStack-StandardMelee, Child[2]=SelectPriorityTarget, Child[3]=HasValidTarget-StandardMelee, Child[4]=SelectAbility-StandardMelee)

+Behaviors=(BehaviorName=SetPriorityTargetStack-StandardShot, NodeType=LWAction)
+Behaviors=(BehaviorName=SetPriorityTargetStack-StandardMelee, NodeType=LWAction)

;Check for sniper fire, if the check passes, then continue forward with the scoring and action selector
+Behaviors=(BehaviorName=SniperDefense, NodeType=Sequence, Child[0]=SetAlertDataStack, child[1]=SD_SelectBestAlert, Child[2]=HasValidAlertDataLocation, Child[3]=SD_AbilitySelector)
+Behaviors=(BehaviorName=SD_SelectBestAlert, NodeType=RepeatUntilFail, Child[0]=SD_EvaluateAlertData)
+Behaviors=(BehaviorName=SD_EvaluateAlertData, NodeType=Sequence, Child[0]=SetNextAlertData, Child[1]=SD_ScoreAlertData, Child[2]=UpdateBestAlertData)

;only sniper alerts are scored, give them a base score and adjust for distance and age in case there are more than 1
+Behaviors=(BehaviorName=SD_ScoreAlertData, NodeType=Sequence, Child[0]=ScoreSniperFire, Child[1]=SSScoreInvalidAlertData, Child[2]=SD_ScoreAlertDataAge, Child[3]=SD_ScoreAlertDataDistance)
+Behaviors=(BehaviorName=ScoreSniperFire, NodeType=Selector, Child[0]=IfSniperFire, Child[1]=AddToAlertDataScore_100)
;If the alert is took damage or taking fire, is over 24 tiles away, and the damagee has no visible enemies, and not absolute or former absolute, then this is concealed sniper fire against the enemy
+Behaviors=(BehaviorName=IfSniperFire, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=IsAlertDataReallyScary, Child[2]=IsAlertDataThreeMoves, Child[3]=IfAlertIsNotSpottedTarget, Child[4]=AddToAlertDataScore_40)
+Behaviors=(BehaviorName=IsAlertDataReallyScary, NodeType=Selector, Child[0]=AlertDataIsType-TakingFire, Child[1]=AlertDataIsType-TookDamage)
;continue only if there are no former or absolute knowledge alerts for this unit
+Behaviors=(BehaviorName=IfAlertIsNotSpottedTarget, NodeType=Sequence, Child[0]=AlertDataIsNotAbsoluteKnowledge, Child[1]=AlertDataIsNotFormerKnowledge)
+Behaviors=(BehaviorName=AlertDataIsNotAbsoluteKnowledge, NodeType=Inverter, Child[0]=AlertDataIsAbsoluteKnowledge)
+Behaviors=(BehaviorName=AlertDataIsNotFormerKnowledge, NodeType=Inverter, Child[0]=AlertDataWasEnemyThere)

;This reduces the score to the alert by oldest
+Behaviors=(BehaviorName=SD_ScoreAlertDataAge, NodeType=Selector, Child[0]=IfAlertDataOld, Child[1]=SD_IfAlertDataStale, Child[2]=IfAlertDataRecent, Child[3]=IfAlertDataFresh, Child[4]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=SD_IfAlertDataStale, NodeType=Sequence, Child[0]=IsAlertDataStale, Child[1]=AddToAlertDataScore_-15)

;This reduces the score to the alert by distance
+Behaviors=(BehaviorName=SD_ScoreAlertDataDistance, NodeType=Selector, Child[0]=SD_IfAlertDataFar, Child[1]=SD_IfAlertDataThreeMoves, Child[2]=SD_IfAlertDataTwoMoves, Child[3]=AddToAlertDataScore_0)
+Behaviors=(BehaviorName=SD_IfAlertDataTwoMoves, NodeType=Sequence, Child[0]=IsAlertDataTwoMoves, Child[1]=AddToAlertDataScore_-5)
+Behaviors=(BehaviorName=SD_IfAlertDataThreeMoves, NodeType=Sequence, Child[0]=IsAlertDataThreeMoves, Child[1]=AddToAlertDataScore_-10)
+Behaviors=(BehaviorName=SD_IfAlertDataFar, NodeType=Sequence, Child[0]=IsAlertDataFar, Child[1]=AddToAlertDataScore_-15)

;Abilities to use, right now it is move forward with cover towards the alert
+Behaviors=(BehaviorName=SD_AbilitySelector, NodeType=Selector, child[0]=SD_FirstAction, child[1]=SD_LastAction)
+Behaviors=(BehaviorName=SD_FirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SD_FirstActionSelector)
+Behaviors=(BehaviorName=SD_LastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SD_LastActionSelector)
+Behaviors=(BehaviorName=SD_FirstActionSelector, NodeType=Selector, child[0]=MoveToAlertIfNotVisible)   
+Behaviors=(BehaviorName=SD_LastActionSelector, NodeType=Selector, Child[0]=MoveToAlertIfNotVisible) 


; Replace panic responses
-Behaviors=(BehaviorName=Panicked_FirstAction_Selector, NodeType=Selector, \\
	Child[0]=PanickedMove, \\
	Child[1]=PanickedAction, \\
	Child[2]=SkipMove)

-Behaviors=(BehaviorName=Panicked_LastAction_Selector, NodeType=Selector, \\
	Child[0]=PanickedAction, \\
	Child[1]=PanickedMove, \\
	Child[2]=SkipMove)

-Behaviors=(BehaviorName=PanickedAction, NodeType=RandSelector, \\
	Child[0]=ShootRandomEnemyForPanic, Param[0]=5, \\
	Child[1]=TryPanickedGrenadeToss, Param[1]=1, \\
	Child[2]=DoCower, Param[2]=2)

+Behaviors=(BehaviorName=Panicked_FirstAction_Selector, NodeType=Selector, Child[0]=PanickedAction, Child[1]=SkipMove)
+Behaviors=(BehaviorName=Panicked_LastAction_Selector, NodeType=Selector, Child[0]=PanickedAction, Child[1]=SkipMove)
+Behaviors=(BehaviorName=PanickedAction, NodeType=RandSelector, Child[0]=DoCower, Param[0]=499)

; ---------------- AoE Targeting thingies -------------------------------------
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-RocketLauncherAggressiveProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GrenadeLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MassReanimation_LWManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MassReanimation_LWFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MassMindspinManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-MassMindspinFewProfile, NodeType=Action)

+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-RocketLauncherAggressiveProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GrenadeLauncherSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MassReanimation_LWManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MassReanimation_LWFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MassMindspinManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-MassMindspinFewProfile, NodeType=Action)

; -------------- High priority target shooting (shoot if kill or target flanked/exposed) -------------
+Behaviors=(BehaviorName=TryHighPriorityShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=HaveHighPriorityTarget, Child[2]=ShootIfAvailable)
+Behaviors=(BehaviorName=HaveHighPriorityTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=FindHighPriorityTarget, NodeType=RepeatUntilFail, Child[0]=NotHighPriorityEvaluateTarget)
+Behaviors=(BehaviorName=NotHighPriorityEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsNotHighPriority)
+Behaviors=(BehaviorName=TargetIsNotHighPriority, NodeType=Inverter, Child[0]=TargetIsHighPriority)
+Behaviors=(BehaviorName=TargetIsHighPriority, NodeType=Sequence, Child[0]=TargetHitChanceHigh, Child[1]=TargetIsNotCivilian, Child[2]=TargetIsNotLost, Child[3]=TargetKillableOrFlanked, Child[4]=AddToTargetScore_1000, Child[5]=UpdateBestTarget)
+Behaviors=(BehaviorName=KillShotEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetHitChanceHigh, Child[2]=TargetIsKillShot)
+Behaviors=(BehaviorName=TargetKillableOrFlanked, NodeType=Selector, Child[0]=TargetIsKillable,  Child[1]=IsFlankingTargetWithoutShield)

; -------------- High priority target shooting (LEU Version) (shoot if kill or target flanked/exposed) -------------
;+Behaviors=(BehaviorName=TryHighPriorityLEU, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightEmUp, Child[1]=HaveHighPriorityLEUTarget, Child[2]=LEUIfAvailable)
;+Behaviors=(BehaviorName=HaveHighPriorityLEUTarget, NodeType=Sequence, Child[0]=SetTargetStack-LightEmUp, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-LightEmUp)
;+Behaviors=(BehaviorName=FindHighPriorityTarget, NodeType=RepeatUntilFail, Child[0]=NotHighPriorityEvaluateTarget)
;+Behaviors=(BehaviorName=NotHighPriorityEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsNotHighPriority)
;+Behaviors=(BehaviorName=TargetIsNotHighPriority, NodeType=Inverter, Child[0]=TargetIsHighPriority)
;+Behaviors=(BehaviorName=TargetIsHighPriority, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetKillableOrFlanked, Child[2]=AddToTargetScore_1000, Child[3]=UpdateBestTarget)
;+Behaviors=(BehaviorName=TargetKillableOrFlanked, NodeType=Selector, Child[0]=TargetIsKillable,  Child[1]=IsFlankingTarget)

; -------------- Killshot target shooting (shoot if kill) -------------
+Behaviors=(BehaviorName=TryKillShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=HaveKillShotTarget, Child[2]=ShootIfAvailable)
+Behaviors=(BehaviorName=HaveKillShotTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=FindKillShotTarget)
+Behaviors=(BehaviorName=FindKillShotTarget, NodeType=RepeatUntilFail, Child[0]=NotKillShotEvaluateTarget)
+Behaviors=(BehaviorName=NotKillShotEvaluateTarget, NodeType=Inverter, Child[0]=KillShotEvaluateTarget)
;+Behaviors=(BehaviorName=KillShotEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetIsKillShot)
+Behaviors=(BehaviorName=TargetIsKillShot, NodeType=Sequence, Child[0]=TargetIsKillable)

; ---------------- LightEmUp (MutonM3_LW, Elite) --------------------------------------------
+Behaviors=(BehaviorName=IsAbilityAvailable-LightEmUp, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LightEmUp, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LightEmUp, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LightEmUp, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-LightEmUp, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LightEmUp, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LightEmUp, NodeType=Action)

; ---------------- RedAlert Fallback actions for various types --------------------------------------------
; Note: These nodes use the bare 'RandOverwatchXX' that only test if the overwatch ability is active, it does no scoring
; based on to-hit chances (which will often fail the node entirely if the unit can see no enemies or the standard shot action
; is disabled for some reason). This is important to get AI to overwatch when they have nothing else to do.
+Behaviors=(BehaviorName=AdventRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=DoCower, Child[2]=SkipMove)
+Behaviors=(BehaviorName=MECRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=SkipMove)
+Behaviors=(BehaviorName=AlienRedFallbackAction, NodeType=Selector, Child[0]=RandOverwatch75, Child[1]=SkipMove)



; ----------------------------------------------------------------------------------------------------------
; -------------------- MutonM2_LW (Centurion) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; "Select Attack if Ideal" includes grenade and melee attack if already in position
+Behaviors=(BehaviorName="MutonM2_LWRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MutonM2_LWRedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=MutonM2_LWRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MutonM2_LWRedAbilitySelector)
+Behaviors=(BehaviorName=MutonM2_LWRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MutonM2_LWRedFirstAction, Child[2]=MutonM2_LWRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=MutonM2_LWRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MutonM2_LWRedFirstActionSelector)
+Behaviors=(BehaviorName=MutonM2_LWRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonetKill, \\
	Child[1]=TryWarCryOnMultipleTargets, \\
	Child[2]=TryBayonet, \\
	Child[3]=TryMoveForGrenade, \\
	Child[4]=TryBayonetCharge, \\
	Child[5]=TryMoveToSuppressClosest, \\
	Child[6]=TryTwoTurnAttackSupportIfSafe, \\
	Child[7]=NeedsReload, \\
	Child[8]=SelectMoveProfileByJob, \\
	Child[9]=TryShootOrReloadOrOverwatch, \\
	Child[10]=TryWarCryOnFewTargets, \\
	Child[11]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=MutonM2_LWRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MutonM2_LWRedLastActionSelector)
+Behaviors=(BehaviorName=MutonM2_LWRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonet, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryGrenade, \\
	Child[3]=TrySuppressClosest, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrAggressive)

; ---------------- BayonetKill (MutonM2_LW, Centurion) --------------------------------------------

+Behaviors=(BehaviorName=TryBayonetKill, NodeType=Sequence, Child[0]=IsAbilityReady-Bayonet, Child[1]=TargetIsKillable, Child[2]=BayonetStepSelector)

; ---------------- BayonetCharge (MutonM2_LW, Centurion) --------------------------------------------
+Behaviors=(BehaviorName=HasValidTarget-BayonetCharge, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-BayonetCharge, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityReady-BayonetCharge, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-BayonetCharge, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-BayonetCharge, NodeType=Action)
+Behaviors=(BehaviorName=EnoughAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=3)

; usage
+Behaviors=(BehaviorName=TryBayonetCharge, NodeType=Sequence, Child[0]=IsAbilityReady-BayonetCharge, Child[1]=BayonetChargeConditions, Child[2]=BayonetChargeStepSelector)
+Behaviors=(BehaviorName=BayonetChargeConditions, NodeType=Selector, Child[0]=HasLowHP, Child[1]=EnoughAlliesVisible) ; only used if wounded or more than 3 visible allies
+Behaviors=(BehaviorName=BayonetChargeStepSelector, NodeType=Selector, Child[0]=BayonetChargeAttack, Child[1]=MoveMeleeDefensiveIfFirstAbility)
+Behaviors=(BehaviorName=BayonetChargeAttack, NodeType=Sequence, Child[0]=IsAbilityAvailable-BayonetCharge, Child[1]=SelectTargetForBayonetCharge, Child[2]=SelectAbility-BayonetCharge)

; targeting
+Behaviors=(BehaviorName=SelectTargetForBayonetCharge, NodeType=Sequence, Child[0]=SetTargetStack-BayonetCharge, Child[1]=SelectBestTargetForStandardMelee, Child[2]=HasValidTarget-BayonetCharge)
+Behaviors=(BehaviorName=SelectBestTargetForBayonetCharge, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialMeleeTarget)

; ---------------- WarCry (MutonM2_LW, Centurion) --------------------------------------------
+Behaviors=(BehaviorName=HasValidTarget-WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-WarCry, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityReady-WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-WarCry, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-WarCry, NodeType=Action)
+Behaviors=(BehaviorName=HasMultipleWarCryTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-WarCry, Param[1]=">=", Param[2]=4) ; Param[2] count includes self.
+Behaviors=(BehaviorName=HasFewWarCryTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-WarCry, Param[1]=">=", Param[2]=2) ; Param[2] count includes self.
+Behaviors=(BehaviorName=IsTargetInMovementRange-WarCry, NodeType=Condition)

+Behaviors=(BehaviorName=TryWarCryOnMultipleTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-WarCry, Child[1]=HasMultipleWarCryTargets, Child[2]=SelectAbility-WarCry)
+Behaviors=(BehaviorName=TryWarCryOnFewTargets, NodeType=Sequence, Child[0]=IsAbilityAvailable-WarCry, Child[1]=HasFewWarCryTargets, Child[2]=SelectAbility-WarCry)

+Behaviors=(BehaviorName=SelectPotentialTargetForWarCry, NodeType=Sequence, Child[0]=SetPotentialAllyTargetStack, Child[1]=SelectBestAllyTargetForWarCry, Child[2]=HasValidTarget-Potential)
+Behaviors=(BehaviorName=SelectBestAllyTargetForWarCry, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialWarCryTarget)
+Behaviors=(BehaviorName=EvaluatePotentialWarCryTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreBestTargetForWarCry, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreBestTargetForWarCry, NodeType=Successor, Child[0]=TargetScoreReachableForWarCry)
+Behaviors=(BehaviorName=TargetScoreReachableForWarCry, NodeType=Sequence, Child[0]=IsTargetInMovementRange-WarCry, Child[1]=AvoidBoundAndPanickedTargets, Child[2]=ScoreByHP)
+Behaviors=(BehaviorName=ScoreByHP, NodeType=Sequence, Child[0]=TargetScoreByScaledMaxStat-eStat_HP, Child[1]=TargetScoreByScaledCurrStat-eStat_HP)
+Behaviors=(BehaviorName=TargetScoreByScaledMaxStat-eStat_HP, NodeType=Action, Param[0]=10)
+Behaviors=(BehaviorName=TargetScoreByScaledCurrStat-eStat_HP, NodeType=Action, Param[0]=1)


; ----------------------------------------------------------------------------------------------------------
; -------------------- MutonM3_LW (Elite or "The Bluton") --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Updated to activate personal shield as priority when available
+Behaviors=(BehaviorName="MutonM3_LWRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MutonM3_LWRedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=MutonM3_LWRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MutonM3_LWRedAbilitySelector)
+Behaviors=(BehaviorName=MutonM3_LWRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MutonM3_LWRedFirstAction, Child[2]=MutonM3_LWRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=MutonM3_LWRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MutonM3_LWRedFirstActionSelector)
+Behaviors=(BehaviorName=MutonM3_LWRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryPersonalShield, \\
	Child[1]=TryBayonetKill, \\
	Child[2]=TryWarCryOnMultipleTargets, \\
	Child[3]=TryBayonet, \\
	Child[4]=DoIfFlankedMove, \\
	Child[5]=RandFilterTryLEU, \\
	Child[6]=TryMoveThenGrenade, \\
	Child[7]=TryBayonetCharge, \\
	Child[8]=NeedsReload, \\
	Child[9]=SelectMoveProfileByJob, \\
	Child[10]=TryShootOrReload, \\
	Child[11]=TryWarCryOnFewTargets, \\
	Child[12]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=MutonM3_LWRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MutonM3_LWRedLastActionSelector)
+Behaviors=(BehaviorName=MutonM3_LWRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonet, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryGrenade, \\
	Child[3]=TrySuppressClosest, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrAggressive)

+Behaviors=(BehaviorName=RandFilterTryLEU, NodeType=RandFilter, Child[0]=ShootIfAvailable, Param[0]=60)

+Behaviors=(BehaviorName=TryShootOrReload, NodeType=Selector, Child[0]=ShootIfAvailable, Child[1]=NeedsReload)
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=ShootIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForLEU, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForLEU, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-StandardShot)

; ---------------- Personal Shield (MutonM3_LW, Elite) --------------------------------------------
+Behaviors=(BehaviorName=TryPersonalShield, NodeType=Sequence, Child[0]=IsAbilityAvailable-PersonalShield, Child[1]=SelectAbility-PersonalShield)
+Behaviors=(BehaviorName=IsAbilityAvailable-PersonalShield, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-PersonalShield, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; -------------------------------------- ADVENT ROCKETEER --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Updated to try and shoot rocket launcher as first action (assuming it is move-or-shoot)
+Behaviors=(BehaviorName="LWAdventRocketeerRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventRocketeer_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventRocketeer_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventRocketeer_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventRocketeer_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventRocketeerRedFirstAction, Child[2]=LWAdventRocketeerRedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventRocketeerRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventRocketeerRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventRocketeerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryRocketLauncher, \\
	Child[2]=TryRocketLauncherSingle33, \\
	Child[3]=NeedsReload, \\
	Child[4]=SelectMove_JobOrDefensive, \\
	Child[5]=TryMoveThenGrenade, \\
	Child[6]=TryShootOrReloadOrOverwatch, \\
	Child[7]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventRocketeerRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventRocketeerRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventRocketeerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryRocketLauncher, \\
	Child[1]=TryShootOrReloadOrOverwatch, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryRocketLauncher, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherProfile, Child[2]=SelectAoETarget-RocketLauncherProfile, Child[3]=SelectAbility-RocketLauncher)
+Behaviors=(BehaviorName=IsAbilityAvailable-RocketLauncher, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RocketLauncher, NodeType=Action)

+Behaviors=(BehaviorName=TryRocketLauncherSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-RocketLauncher, Child[1]=FindPotentialAoETargets-RocketLauncherSingleProfile, Child[2]=SelectAoETarget-RocketLauncherSingleProfile, Child[3]=SelectAbility-RocketLauncher)
+Behaviors=(BehaviorName=TryRocketLauncherSingle33, NodeType=RandFilter, Child[0]=TryRocketLauncherSingle, Param[0]=33)

; ----------------------------------------------------------------------------------------------------------
; -------------------------------------- ADVENT GRENADIER --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Updated to allow firing their grenade launcher -- LIMITATION: only works with a single grenade type
+Behaviors=(BehaviorName="LWAdventGrenadierRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventGrenadierRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventGrenadierRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventGrenadier_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventGrenadier_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventGrenadierRedFirstAction, Child[2]=LWAdventGrenadierRedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventGrenadierRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventGrenadierRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventGrenadierRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryGrenadeLauncher, \\
	Child[2]=NeedsReload, \\
	Child[3]=TryMoveThenGrenadeLauncher, \\
	Child[4]=MoveDefensive, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventGrenadierRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventGrenadierRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventGrenadierRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryGrenadeLauncher, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TryGrenadeLauncherSingle33, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=TryGrenadeLauncherSingle, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryMoveThenGrenadeLauncher, NodeType=Selector, Child[0]=TryMoveForGrenadeLauncher, Child[1]=TryGrenadeLauncher)
+Behaviors=(BehaviorName=TryMoveForGrenadeLauncher, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-LaunchGrenade, Child[2]=FindPotentialAoETargets-GrenadeLauncherProfile, Child[3]=MoveStandardIfFirstAbility-GrenadeLauncher)

+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-GrenadeLauncher, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindGrenadeLauncherDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindGrenadeLauncherDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-LaunchGrenade, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Standard)

+Behaviors=(BehaviorName=TryGrenadeLauncher, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherProfile, Child[2]=SelectAoETarget-GrenadeLauncherProfile, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncherSingle, NodeType=Sequence, Child[0]=IsAbilityAvailable-LaunchGrenade, Child[1]=FindPotentialAoETargets-GrenadeLauncherSingleProfile, Child[2]=SelectAoETarget-GrenadeLauncherSingleProfile, Child[3]=SelectAbility-LaunchGrenade)
+Behaviors=(BehaviorName=TryGrenadeLauncherSingle33, NodeType=RandFilter, Child[0]=TryGrenadeLauncherSingle, Param[0]=33)
+Behaviors=(BehaviorName=IsAbilityAvailable-LaunchGrenade, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LaunchGrenade, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LaunchGrenade, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LaunchGrenade, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ---------------------------------------- ADVENT SENTRY ---------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; adding basic high priority target shooting
+Behaviors=(BehaviorName="LWAdventSentryRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventSentry_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventSentry_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventSentry_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventSentry_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventSentryRedFirstAction, Child[2]=LWAdventSentryRedLastAction, Child[3]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventSentryRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventSentryRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventSentryRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=NeedsReload, \\
	Child[2]=SelectMove_JobOrDefensive, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventSentryRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventSentryRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventSentryRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryHighPriorityShot, \\
	Child[1]=TryGrenade, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMove_JobOrDefensive)

; ----------------------------------------------------------------------------------------------------------
; --------------------------------------- ADVENT GUNNER ----------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Abilities to handle :
; 'AreaSuppression' -- AOE targeting
; 'LockedOn' -- bonus to shooting at same unit, shouldn't require anything special
; 'TraverseFire' -- shooting doesn't end turn if done as first action -- only on M3, so split into separate root
; 'DangerZone' -- increases suppression area, shouldn't require anything special

+Behaviors=(BehaviorName="LWAdventGunnerRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWAdventGunnerRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWAdventGunnerRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWAdventGunner_RedAbilitySelector)
+Behaviors=(BehaviorName=LWAdventGunner_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWAdventGunnerRedFirstAction, Child[2]=LWAdventGunnerRedLastAction, Child[3]=LWAdventGunnerRedPostTraverseFireAction, Child[4]=AdventRedFallbackAction)

+Behaviors=(BehaviorName=LWAdventGunnerRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWAdventGunnerRedFirstActionSelector)
+Behaviors=(BehaviorName=LWAdventGunnerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=NeedsReload, \\
	Child[2]=TryHighPriorityShot, \\
	Child[3]=TryMoveOrTraverseFire, \\
	Child[4]=SelectMove_JobOrDefensive, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWAdventGunnerRedPostTraverseFireAction, NodeType=Sequence, Child[0]=WasLastAbility-StandardShot, Child[1]=LWAdventGunnerRedLastActionSelector)
+Behaviors=(BehaviorName=LWAdventGunnerRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWAdventGunnerRedLastActionSelector)
; Rolls twice for TryAreaSuppression, since "per-ally" check is fixed at 10%
+Behaviors=(BehaviorName=LWAdventGunnerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryHighPriorityShot, \\
	Child[1]=TryAreaSuppression, \\
	Child[2]=TryAreaSuppression, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=TryMoveOrTraverseFire, NodeType=RandSelector, Child[0]=SelectMove_JobOrDefensive, Param[0]=33, Child[1]=TryTraverseFire, Param[1]=67)
+Behaviors=(BehaviorName=TryTraverseFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-TraverseFire, Child[1]=TryShootOrReload)

+Behaviors=(BehaviorName=TryAreaSuppression, NodeType=Sequence, Child[0]=IsAbilityAvailable-AreaSuppression, Child[1]=CheckShouldSuppressVar, Child[2]=SelectTargetForAreaSuppressionByAim, Child[3]=SelectAbility-AreaSuppression)
+Behaviors=(BehaviorName=SelectTargetForAreaSuppressionByAim, NodeType=Sequence, Child[0]=SetTargetStack-AreaSuppression, Child[1]=SelectBestSuppressionTargetByAim, Child[2]=HasValidTarget-AreaSuppression)

+Behaviors=(BehaviorName=IsAbilityAvailable-TraverseFire, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AreaSuppression, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AreaSuppression, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-AreaSuppression, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-AreaSuppression, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-AreaSuppression, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; ------------------------------ MEC ARCHER (SUPPORT MEC) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Same as ADVENT MEC M2 - shouldn't need any changes for basic behavior
+Behaviors=(BehaviorName="LWAdventMECArcherRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MECMk2RedAlert, Child[3]=GenericAlertHandler)


; ----------------------------------------------------------------------------------------------------------
; ----------------------------------- NAJA (VIPER SNIPER) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Same as Viper - updated to account for move-or-fire for sniper rifle
+Behaviors=(BehaviorName="LWNajaRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWNajaRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWNajaRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWNajaRedAbilitySelector)
+Behaviors=(BehaviorName=LWNajaRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWNajaRedFirstAction, Child[2]=LWNajaRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=LWNajaRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWNajaRedFirstActionSelector)
+Behaviors=(BehaviorName=LWNajaRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedSniperMove, \\
	Child[1]=TryHighPriorityShot, \\
	Child[2]=TrySniperShootOrReload, \\
	Child[3]=MoveIfAnyEnemyWithin12Tiles, \\
	Child[4]=TrySniperShootOrReloadOrOverwatch, \\
	Child[5]=TryMoveThenPoisonSpit, \\
	Child[6]=SniperMoveIfEnemyVisible, \\
	Child[7]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWNajaRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWNajaRedLastActionSelector)
+Behaviors=(BehaviorName=LWNajaRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryHighPriorityShot, \\
	Child[1]=DoIfFlankedSniperMove, \\
	Child[2]=MoveIfAnyEnemyWithin12Tiles, \\
	Child[3]=TrySniperShootOrReloadOrOverwatch, \\
	Child[4]=TryPoisonSpitSingle, \\
	Child[5]=RestrictedSniperMoveOnly, \\
	Child[6]=HoldGroundIfEnemyVisible, \\
	Child[7]=SniperMove, \\
	Child[8]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=DoIfFlankedSniperMove, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=SniperMove)
+Behaviors=(BehaviorName=HoldGroundIfEnemyVisible, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=SkipMove)
+Behaviors=(BehaviorName=SniperMoveIfEnemyVisible, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=SniperMove)

+Behaviors=(BehaviorName=RandMoveIfEnemyClose, NodeType=RandFilter, Child[0]=MoveIfAnyEnemyWithin12Tiles, Param[0]=60)
+Behaviors=(BehaviorName=MoveIfAnyEnemyWithin12Tiles, NodeType=Sequence, Child[0]=AnyEnemyWithin12Tiles, Child[1]=SniperMove)
+Behaviors=(BehaviorName=AnyEnemyWithin12Tiles, NodeType=Sequence, Child[0]=SetVisiblePotentialTargetStack, Child[1]=SearchAnyEnemyWithin12Tiles, Child[2]=HasValidTarget-Potential)
+Behaviors=(BehaviorName=SearchAnyEnemyWithin12Tiles, NodeType=RepeatUntilFail, Child[0]=IterateNextTargetForWithin12Tiles)
+Behaviors=(BehaviorName=IterateNextTargetForWithin12Tiles, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForWithin12Tiles, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForWithin12Tiles, NodeType=Successor, Child[0]=EvaluateForWithin12Tiles)
+Behaviors=(BehaviorName=EvaluateForWithin12Tiles, NodeType=Sequence, Child[0]=TargetIsNotCivilian, Child[1]=TargetNotTeamResistance, Child[2]=TargetIsEnemy, Child[3]=TargetIsNotEnemyVIP, Child[4]=TargetNotBoundOrPanicked, Child[5]=TargetIsAttackable, Child[6]=AddToTargetScore_-100, Child[7]=SSScoreTargetIfWithin12Tiles)
+Behaviors=(BehaviorName=SSScoreTargetIfWithin12Tiles, NodeType=Successor, Child[0]=ScoreTargetIfWithin12Tiles)
+Behaviors=(BehaviorName=ScoreTargetIfWithin12Tiles, NodeType=Sequence, Child[0]=TargetDistanceLesserThan12Tiles, Child[1]=AddToTargetScore_300)
+Behaviors=(BehaviorName=TargetDistanceLesserThan12Tiles, NodeType=StatCondition, Param[0]=PotentialTargetDistance, Param[1]="<", Param[2]=18); 18m = 12 tiles

+Behaviors=(BehaviorName=TrySniperShootOrReload, NodeType=Selector, Child[0]=SniperShootIfAvailable, Child[1]=NeedsReload)
+Behaviors=(BehaviorName=SniperShootIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperStandardFire, Child[1]=SelectTargetForSniperShot, Child[2]=SelectAbility-SniperStandardFire)
+Behaviors=(BehaviorName=SelectTargetForSniperShot, NodeType=Sequence, Child[0]=SetTargetStack-SniperStandardFire, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-SniperStandardFire)

+Behaviors=(BehaviorName=TrySniperShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingSniperOverwatch, Child[1]=SniperShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=ConsiderTakingSniperOverwatch, NodeType=Selector, Child[0]=TryTwoTurnSniperAttackSupport, Child[1]=ConsiderTakingOverwatchAllUnits, Child[2]=ConsiderTakingOverwatchVIP, Child[3]=ConsiderTakingOverwatchEvac)
+Behaviors=(BehaviorName=TryTwoTurnSniperAttackSupport, NodeType=Sequence, Child[0]=HasTwoTurnAttackTargets, Child[1]=TrySniperOverwatchTwoTurnTarget)
+Behaviors=(BehaviorName=TrySniperOverwatchTwoTurnTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-SniperRifleOverwatch, Child[1]=RandOverwatch100_50)


+Behaviors=(BehaviorName=IsAbilityAvailable-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SniperStandardFire, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-SniperStandardFire, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-SniperStandardFire, NodeType=Action)

+Behaviors=(BehaviorName=IsAbilityAvailable-SniperRifleOverwatch, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-SniperRifleOverwatch, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-SniperRifleOverwatch, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-SniperRifleOverwatch, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-SniperRifleOverwatch, NodeType=Action)


; SNIPER MOVEMENT
+Behaviors=(BehaviorName=FindDestination-SniperMove, NodeType=Action)
+Behaviors=(BehaviorName=FindDestinationWithLoS-SniperMove, NodeType=Action)
+Behaviors=(BehaviorName=FindRestrictedDestination-SniperMove, NodeType=Action)
 
+Behaviors=(BehaviorName=SniperMove, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=SniperMoveUnsafeSelector)
+Behaviors=(BehaviorName=SniperMoveUnsafeSelector, NodeType=Selector, Child[0]=SniperMoveUnsafeDashIfFlanked, Child[1]=SniperMoveUnsafe)
+Behaviors=(BehaviorName=SniperMoveUnsafeDashIfFlanked, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=CheckIfNeedToMove, Child[2]=SniperMoveUnsafeDash)
+Behaviors=(BehaviorName=SniperMoveUnsafeDash, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=OverrideIdealRange-21, Child[4]=UseDashMovement, Child[5]=FindBestSniperDestination, Child[6]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=SniperMoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=OverrideIdealRange-21, Child[4]=FindBestSniperDestination, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindBestSniperDestination, NodeType=Selector, Child[0]=FindRestrictedDestination-SniperMove, Child[1]=FindRestrictedDestination-MWP_Defensive, Child[2]=FindDestination-MWP_Defensive)
+Behaviors=(BehaviorName=RestrictedSniperMoveOnly, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=OverrideIdealRange-21, Child[4]=FindRestrictedDestination-SniperMove, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=OverrideIdealRange-21, NodeType=Action, Param[0]=21)

+Behaviors=(BehaviorName=SniperMoveWithLoS, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=SniperMoveWithLoSUnsafe)
+Behaviors=(BehaviorName=SniperMoveWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-SniperMove, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=NCSniperMoveWithLoS, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=NCSniperMoveWithLoSUnsafe)
+Behaviors=(BehaviorName=NCSniperMoveWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetNoCoverMovement, Child[3]=FindDestinationWithLoS-SniperMove, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindFriendlySniperDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAllyLoS, Child[2]=FindRestrictedDestination-SniperMove)

+Behaviors=(BehaviorName=SniperMoveIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMove)
+Behaviors=(BehaviorName=SniperMoveIfFirstAbilityUnsafe, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMoveUnsafe)
+Behaviors=(BehaviorName=SniperMoveWithLoSIfFirstAbility, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMoveWithLoS)
+Behaviors=(BehaviorName=SniperMoveWithLoSIfFirstAbilityUnsafe, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SniperMoveWithLoSUnsafe)

; ----------------------------------------------------------------------------------------------------------
; ---------------------------- SIDEWINDER (VIPER FLANKER) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Same as Viper
+Behaviors=(BehaviorName="LWSidewinderRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ViperRedAlert, Child[3]=GenericAlertHandler)

; Modified to better utilize the HitAndRun ability -- will move unsafely with first move to flank, under assumption will hit and get third move
+Behaviors=(BehaviorName="LWSidewinderHitAndRunRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWSidewinderRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=LWSidewinderRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWSidewinderRedAbilitySelector)
+Behaviors=(BehaviorName=LWSidewinderRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWSidewinderRedFirstAction, Child[2]=LWSidewinderRedSecondAction, Child[3]=LWSidewinderRedLastAction, Child[4]=TrySlitherPostStandardShot, Child[5]=AlienRedFallbackAction)
+Behaviors=(BehaviorName=WasLastAbility-StandardShot, NodeType=Condition)

+Behaviors=(BehaviorName=TrySlitherPostStandardShot, NodeType=Sequence, Child[0]=WasLastAbility-StandardShot, Child[1]=FindStealthDestination_AvoidEnemy, Child[2]=SelectAbility-StandardMove)


+Behaviors=(BehaviorName=LWSidewinderRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWSidewinderRedFirstActionSelector)
+Behaviors=(BehaviorName=LWSidewinderRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=MoveFlankingUnsafe, \\
	Child[1]=DoIfFlankedMove, \\
	Child[2]=NeedsReload, \\
	Child[3]=SelectMove_JobOrAggressive, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=LWSidewinderRedSecondAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWSidewinderRedSecondActionSelector)
+Behaviors=(BehaviorName=LWSidewinderRedSecondActionSelector, NodeType=Selector, \\
	Child[0]=TryShootOrReloadOrOverwatch, \\
	Child[1]=HuntEnemyWithCover, \\
	Child[2]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=LWSidewinderRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWSidewinderRedLastActionSelector)
+Behaviors=(BehaviorName=LWSidewinderRedLastActionSelector, NodeType=Selector, \\
	Child[0]=FallBackWithLoS)

; ----------------------------------------------------------------------------------------------------------
; ---------------------- SectoidM2_LW (SECTOID COMMANDER) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Currently a placeholder copy of the Sectoid
; Needs updating for active abilities:
; 'MassMindspin' -- like mindspin, but more people -- cone AOE Targetable attack
; 'MassReanimation_LW' -- like gatekeeper ability, but unique because of animations
+Behaviors=(BehaviorName="SectoidM2_LWRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectoidM2_LWRedAlert, Child[3]=SectoidM2_LWNoEnemySightedMove)
+Behaviors=(BehaviorName=SectoidM2_LWRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SectoidM2_LWRedAbilitySelector)
+Behaviors=(BehaviorName=SectoidM2_LWRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SectoidM2_LWRedFirstAction, Child[2]=SectoidM2_LWRedLastAction, Child[3]=AlienRedFallbackAction)

+Behaviors=(BehaviorName=SectoidM2_LWRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SectoidM2_LWRedFirstActionSelector)
+Behaviors=(BehaviorName=SectoidM2_LWRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryKillShot, \\
	Child[2]=TryMoveForMassReanimation_LWMany, \\
	Child[3]=TryMoveForMassMindspinMany, \\
	Child[4]=NeedsReload, \\
	Child[5]=SelectMove_JobOrDefensive, \\
	Child[6]=TryMoveForMassMindspinFew, \\
	Child[7]=TryMoveForMassReanimation_LWFew, \\
	Child[8]=TryShootOrReloadOrOverwatch, \\
	Child[9]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=SectoidM2_LWRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SectoidM2_LWRedLastActionSelector)
+Behaviors=(BehaviorName=SectoidM2_LWRedLastActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryKillShot, \\
	Child[2]=TryMassReanimation_LWMany, \\
	Child[3]=TryMassMindspinMany, \\
	Child[4]=TryHighPriorityShot, \\
	Child[5]=TryMassMindspinFew, \\
	Child[6]=TryMassReanimation_LWFew, \\
	Child[7]=TryShootOrReloadOrOverwatch, \\
	Child[8]=HuntEnemyWithCover, \\
	Child[9]=SelectMove_JobOrDefensive)


; ---------------- No enemy sighted re-animation actions ---------------------------
+Behaviors=(BehaviorName=SectoidM2_LWNoEnemySightedMove, NodeType=Selector, Child[0]=GenericOrangeMovement, Child[1]=SectoidM2_LWYellowAlert, Child[2]=GenericGreenMovement)
+Behaviors=(BehaviorName=SectoidM2_LWYellowAlert, NodeType=Sequence, Child[0]=IsYellowAlert, Child[1]=SectoidM2_LWYellowAbilitySelector)
+Behaviors=(BehaviorName=SectoidM2_LWYellowAbilitySelector, NodeType=Selector, Child[0]=TryMassReanimation_LWMany, Child[1]=GenericAlertHandler)

; ---------------- Mass Mindspin (SectoidM2_LW) -----------------------------------------
+Behaviors=(BehaviorName=TryMassMindspinMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassMindspin, Child[1]=FindPotentialAoETargets-MassMindspinManyProfile, Child[2]=SelectAoETarget-MassMindspinManyProfile,  Child[3]=SelectAbility-MassMindspin)
+Behaviors=(BehaviorName=TryMassMindspinFew, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassMindspin, Child[1]=FindPotentialAoETargets-MassMindspinFewProfile, Child[2]=SelectAoETarget-MassMindspinFewProfile,  Child[3]=SelectAbility-MassMindspin)

+Behaviors=(BehaviorName=TryMoveThenMassMindspinMany, NodeType=Selector, Child[0]=TryMoveForMassMindspinMany, Child[1]=TryMassMindspinMany)
+Behaviors=(BehaviorName=TryMoveForMassMindspinMany, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-MassMindspin, Child[2]=FindPotentialAoETargets-MassMindspinManyProfile, Child[3]=MoveStandardIfFirstAbility-MassMindspin)

+Behaviors=(BehaviorName=TryMoveThenMassMindspinFew, NodeType=Selector, Child[0]=TryMoveForMassMindspinFew, Child[1]=TryMassMindspinFew)
+Behaviors=(BehaviorName=TryMoveForMassMindspinFew, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-MassMindspin, Child[2]=FindPotentialAoETargets-MassMindspinFewProfile, Child[3]=MoveStandardIfFirstAbility-MassMindspin)

+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-MassMindspin, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassMindspin, Child[1]=NotLastActionPoint, Child[2]=FindMassMindspinDestination, Child[3]=SelectAbility-MassMindspin)
+Behaviors=(BehaviorName=FindMassMindspinDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-MassMindspin, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Defensive)

+Behaviors=(BehaviorName=IsAbilityAvailable-MassMindspin, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-MassMindspin, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-MassMindspin, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-MassMindspin, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-MassMindspin, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-MassMindspin, NodeType=Action)

; ---------------- Mass Psi Reanimate (SectoidM2_LW) ------------------------------------
+Behaviors=(BehaviorName=TryMassReanimation_LWMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassReanimation_LW, Child[1]=FindPotentialAoETargets-MassReanimation_LWManyProfile, Child[2]=SelectAoETarget-MassReanimation_LWManyProfile,  Child[3]=SelectAbility-MassReanimation_LW)
+Behaviors=(BehaviorName=TryMassReanimation_LWFew, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassReanimation_LW, Child[1]=FindPotentialAoETargets-MassReanimation_LWFewProfile, Child[2]=SelectAoETarget-MassReanimation_LWFewProfile,  Child[3]=SelectAbility-MassReanimation_LW)

+Behaviors=(BehaviorName=TryMoveThenMassReanimation_LWMany, NodeType=Selector, Child[0]=TryMoveForMassReanimation_LWMany, Child[1]=TryMassReanimation_LWMany)
+Behaviors=(BehaviorName=TryMoveForMassReanimation_LWMany, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-MassReanimation_LW, Child[2]=FindPotentialAoETargets-MassReanimation_LWManyProfile, Child[3]=MoveStandardIfFirstAbility-MassReanimation_LW)

+Behaviors=(BehaviorName=TryMoveThenMassReanimation_LWFew, NodeType=Selector, Child[0]=TryMoveForMassReanimation_LWFew, Child[1]=TryMassReanimation_LWFew)
+Behaviors=(BehaviorName=TryMoveForMassReanimation_LWFew, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-MassReanimation_LW, Child[2]=FindPotentialAoETargets-MassReanimation_LWFewProfile, Child[3]=MoveStandardIfFirstAbility-MassReanimation_LW)

+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-MassReanimation_LW, NodeType=Sequence, Child[0]=IsAbilityAvailable-MassReanimation_LW, Child[1]=NotLastActionPoint, Child[2]=FindMassReanimation_LWDestination, Child[3]=SelectAbility-MassReanimation_LW)
+Behaviors=(BehaviorName=FindMassReanimation_LWDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-MassReanimation_LW, Child[2]=RestrictToEnemyLoS, Child[3]=FindRestrictedDestination-MWP_Defensive)

+Behaviors=(BehaviorName=IsAbilityAvailable-MassReanimation_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-MassReanimation_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-MassReanimation_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-MassReanimation_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-MassReanimation_LW, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-MassReanimation_LW, NodeType=Action)


; ----------------------------------------------------------------------------------------------------------
; ------------------------------------------ LWDrone -------------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Select attack if in range, otherwise defend
+Behaviors=(BehaviorName=LWDroneRoot, NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=LWDroneRedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=LWDroneRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LWDroneRedAbilitySelector)
+Behaviors=(BehaviorName=LWDroneRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=LWDroneRedFirstAction, Child[2]=LWDroneRedLastAction, Child[3]=MECRedFallbackAction)

+Behaviors=(BehaviorName=LWDroneRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=LWDroneRedFirstActionSelector)
+Behaviors=(BehaviorName=LWDroneRedFirstActionSelector, NodeType=Selector, \\
    Child[0]=SelectHeatSeekMoveNoDash, \\
    Child[1]=TryHighPriorityShock, \\
    Child[2]=TryMoveForDroneRepair, \\
    Child[3]=TryMoveForDroneMeleeStun, \\
    Child[4]=TryDroneFlankingMove, \\
    Child[5]=TryDroneRegularMove, \\
    Child[6]=SelectHeatSeekMoveNoDash)

+Behaviors=(BehaviorName=LWDroneRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=LWDroneRedLastActionSelector)
+Behaviors=(BehaviorName=LWDroneRedLastActionSelector, NodeType=Selector, \\
    Child[0]=TryMeleeStun, \\
    Child[1]=TryHighPriorityShock, \\
    Child[2]=TryRepairOrShock, \\
    Child[3]=ShockIfAvailable, \\
    Child[4]=SelectHeatSeekMoveNoDash, \\
    Child[5]=TryDroneRegularMove)


+Behaviors=(BehaviorName=TryDroneFlankingMove, NodeType=Sequence, Child[0]=IsMyJob-Soldier, Child[1]=IsAbilityAvailable-StandardMove, Child[2]=ResetDestinationSearch, Child[3]=RestrictToFlanking, Child[4]=SetNoCoverMovement, Child[5]=RestrictToAbilityRange-LWDroneShock, Child[6]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=TryDroneRegularMove, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetNoCoverMovement, Child[3]=RestrictToAbilityRange-LWDroneShock, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=TryHighPriorityShock, NodeType=Sequence, Child[0]=IsAbilityAvailable-LWDroneShock, Child[1]=HaveHighPriorityShockTarget, Child[2]=ShockIfAvailable)
+Behaviors=(BehaviorName=HaveHighPriorityShockTarget, NodeType=Sequence, Child[0]=SetTargetStack-LWDroneShock, Child[1]=FindHighPriorityTarget, Child[2]=HasValidTarget-LWDroneShock)

+Behaviors=(BehaviorName=TryMeleeStun, NodeType=Sequence, Child[0]=IsAbilityAvailable-LWDroneMeleeStun, Child[1]=SelectTargetForMeleeStun, Child[2]=SelectAbility-LWDroneMeleeStun)
+Behaviors=(BehaviorName=SelectTargetForMeleeStun, NodeType=Sequence, Child[0]=SetTargetStack-LWDroneMeleeStun, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-LWDroneMeleeStun)

+Behaviors=(BehaviorName=TryRepairOrShock, NodeType=RandSelector, Child[0]=DroneRepairIfAvailable, Param[0]=60, Child[1]=ShockIfAvailable, Param[1]=40)

+Behaviors=(BehaviorName=ShockIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-LWDroneShock, Child[1]=SelectTargetForShock, Child[2]=SelectAbility-LWDroneShock)
+Behaviors=(BehaviorName=SelectTargetForShock, NodeType=Sequence, Child[0]=SetTargetStack-LWDroneShock, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-LWDroneShock)

+Behaviors=(BehaviorName=DroneRepairIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-LWDroneRepair, Child[1]=SelectTargetForDroneRepair, Child[2]=SelectAbility-LWDroneRepair)

+Behaviors=(BehaviorName=TryMoveForDroneRepair, NodeType=Sequence, Child[0]=IsMyJob-Support, Child[1]=SafeToMove, Child[2]=IsAbilityReady-LWDroneRepair, Child[3]=SelectTargetForDroneRepair, Child[4]=MoveStandardIfFirstAbility-LWDroneRepair)
+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-LWDroneRepair, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindDroneRepairDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindDroneRepairDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToPotentialTargetRange-LWDroneRepair, Child[2]=FindRestrictedDestination-MWP_Fanatic)

+Behaviors=(BehaviorName=SelectTargetForDroneRepair, NodeType=Sequence, Child[0]=SetTargetStack-LWDroneRepair, Child[1]=SelectBestTargetForDroneRepair, Child[2]=HasValidTarget-LWDroneRepair)
+Behaviors=(BehaviorName=SelectBestTargetForDroneRepair, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetsDroneRepair)
+Behaviors=(BehaviorName=EvaluateTargetsDroneRepair, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHighestSoldierRank, Child[2]=TargetScoreHealth, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)

+Behaviors=(BehaviorName=TryMoveForDroneMeleeStun, NodeType=Sequence, Child[0]=IsMyJob-Aggressor, Child[1]=IsAbilityReady-LWDroneMeleeStun, Child[2]=SelectTargetForDroneMeleeStun, Child[3]=MoveStandardIfFirstAbility-LWDroneMeleeStun)
+Behaviors=(BehaviorName=MoveStandardIfFirstAbility-LWDroneMeleeStun, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindDroneMeleeStunDestination, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindDroneMeleeStunDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToPotentialTargetRange-LWDroneMeleeStun, Child[2]=FindRestrictedDestination-MWP_Fanatic)

+Behaviors=(BehaviorName=SelectTargetForDroneMeleeStun, NodeType=Sequence, Child[0]=SetTargetStack-LWDroneMeleeStun, Child[1]=SelectBestTargetForDroneMeleeStun, Child[2]=HasValidTarget-LWDroneMeleeStun)
+Behaviors=(BehaviorName=SelectBestTargetForDroneMeleeStun, NodeType=RepeatUntilFail, Child[0]=EvaluateTargetsDroneMeleeStun)
+Behaviors=(BehaviorName=EvaluateTargetsDroneMeleeStun, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHighestSoldierRank, Child[2]=TargetScoreHealth, Child[3]=TargetScoreInvalidateCivilians, Child[4]=SSScoreTargetOutIfLost, Child[5]=UpdateBestTarget)


+Behaviors=(BehaviorName=IsAbilityAvailable-LWDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LWDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LWDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LWDroneShock, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-LWDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LWDroneShock, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LWDroneShock, NodeType=Action)

+Behaviors=(BehaviorName=IsAbilityAvailable-LWDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LWDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LWDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LWDroneMeleeStun, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-LWDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LWDroneMeleeStun, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LWDroneMeleeStun, NodeType=Action)

+Behaviors=(BehaviorName=IsAbilityAvailable-LWDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-LWDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LWDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LWDroneRepair, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-LWDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToAbilityRange-LWDroneRepair, NodeType=Action)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-LWDroneRepair, NodeType=Action)

; ----------------------------------------------------------------------------------------------------------
; --------------------------- HIVE QUEEN (BIG MOMMA CHRYSSALID) --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------
; Same as Chryssalid - will need updates depending on new abilities
+Behaviors=(BehaviorName="LWHiveQueenRoot", NodeType=Selector, Child[0]=ChryssalidCocoonBranch, Child[1]=ChryssalidRoot)


; ----------------------------------------------------------------------------------------------------------
; ------------------------------------- MISC NEW BT NODES --------------------------------------------------
; ----------------------------------------------------------------------------------------------------------

; MoveStandardWithLoSUnsafeIgnoreHazards: Equivalent to MoveStandardWithLoSUnsafe except will also ignore hazards
; in tiles.
+Behaviors=(BehaviorName="MoveStandardWithLoSUnsafeIgnoreHazards", NodeType="Sequence", Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestinationWithLoS-MWP_Standard, Child[4]=SelectAbility-StandardMove)

; MoveStandardUnsafeIgnoreHazards: Equivalent to MoveStandardUnsafe except will also ignore hazards
+Behaviors=(BehaviorName="MoveStandardUnsafeIgnoreHazards", NodeType="Sequence", Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestination-MWP_Standard, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName="MoveStandardUnsafeIgnoreHazards", NodeType="Sequence", Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestination-MWP_Standard, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=ChosenCheatIfNoVisible, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=SelectHeatSeekMoveNoDash)


+Behaviors=(BehaviorName=MoveAdvanceToCoverUnsafeIgnoreHazards, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestination-MWP_AdvanceCover, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveAdvanceToCoverLoSUnsafeIgnoreHazards, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindDestinationWithLoS-MWP_AdvanceCover, Child[4]=SelectAbility-StandardMove)

; ConsiderTakingOverwatchLastAction - If we have only bad shots (<50%) and this is our last action point, try overwatching without any regard for the
; number of already overwatching allies.
+Behaviors=(BehaviorName="ConsiderTakingOverwatchLastAction", NodeType="Sequence", Child[0]=AllShotPercentagesBelow50, Child[1]=IsLastActionPoint, Child[2]=RandOverwatch50)

; bugfix for bad charger behavior
-Behaviors=(BehaviorName=JobRoot_Charger, NodeType=Selector, Child[0]=TryChargerJobIfUnrevealed, Child[1]=TryChargerJobIfRevealed)
+Behaviors=(BehaviorName=JobRoot_Charger, NodeType=Selector, Child[0]=ShouldPatrol, Child[1]=TryChargerJobIfUnrevealed)


; AvoidDoubleMove - Conditions for which we should try to avoid double moving, and instead overwatch.
; Currently: If we can see any enemies, it's preferable to OW instead of taking a second move. This avoids enemies move/OWing instead of
; trying to catch up to XCOM when they're being outrun.
; Also aggressively overwatch with last action instead of double move if near evac
+Behaviors=(BehaviorName=AvoidDoubleMove, NodeType=Selector, Child[0]=AnyLivingEnemyVisible, Child[1]=EvacWithinVisRange)

; TryOverwatchLastAction - If this is the last action and we're in double-move avoidance mode, overwatch if it is available.
+Behaviors=(BehaviorName=TryOverwatchLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AvoidDoubleMove, Child[2]=TryOverwatch)

;ChosenWarlock
+EquivalentAbilities=( KeyName=ShieldAlly, EquivalentAbilityName[0]=ShieldAllyM1, EquivalentAbilityName[1]=ShieldAllyM2, EquivalentAbilityName[2]=ShieldAllyM3, EquivalentAbilityName[3]=ShieldAllyM4, EquivalentAbilityName[4]=ShieldAllyM5)

-Behaviors=(BehaviorName="ChosenWarlock::CharacterRoot", NodeType=Selector, Child[0]=ChosenUnactivated, Child[1]=ChosenActivated, Child[2]=ChosenEngaged, Child[3]=SkipMove)
-Behaviors=(BehaviorName="ChosenWarlock::ChosenEngaged", NodeType=Selector,      Child[0]=TryEndSpectralArmy,      Child[1]=TryChosenSummon,      Child[2]=OverwatchHandlerShootOverwatcherOption,      Child[3]=WarlockMoveIfNecessary,      Child[4]=TryWarlockCombatAbilities,      Child[5]=OverwatchHandlerBackupOption,      Child[6]=TryShootOrReloadOrOverwatch,      Child[7]=HuntEnemyWithCover)

+Behaviors=(BehaviorName="ChosenWarlock::CharacterRoot", NodeType=Selector, Child[0]="::ChosenEngaged")
+Behaviors=(BehaviorName="ChosenWarlock::ChosenEngaged", NodeType=Selector, Child[0]=TryLWChosenkidnap, Child[1]=TryPostChosenSuperiority, Child[2]=ChosenWarlockFirstAction, Child[3]=ChosenWarlockLastAction)

+Behaviors=(BehaviorName=ChosenWarlockFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ChosenWarlockFirstActionSelector)
+Behaviors=(BehaviorName=ChosenWarlockLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ChosenWarlockLastActionSelector)

+Behaviors=(BehaviorName="ChosenWarlockFirstActionSelector", NodeType=Selector, \\
			Child[0]=TryChosenSummon, \\
			Child[1]=TryAmmoDump, \\
			Child[2]=TryShieldAlly, \\
			Child[3]=DoIfFlankedMove, \\
			Child[4]=TryTeleportAlly, \\
			Child[5]=TakePriorityshotsChosen, \\
			Child[6]=TryMindScorch, \\
			Child[7]=TryPsiMindControl, \\
			Child[8]=ChosenCheatIfNoVisible, \\
			Child[9]=TryShootOrReloadOrOverwatch, \\
			Child[10]=HuntEnemy)

+Behaviors=(BehaviorName="ChosenWarlockLastActionSelector", NodeType=Selector, \\
			Child[0]=TryChosenSummon, \\
			Child[1]=TryAmmoDump, \\
			Child[2]=TryShieldAlly, \\
			Child[3]=TakePriorityshotsChosen, \\
			Child[4]=TryMindScorch, \\
			Child[5]=TryPsiMindControl, \\
			Child[6]=TryTeleportAlly, \\
			Child[7]=DoIfFlankedMove, \\
			Child[8]=TryShootOrReloadOrOverwatch, \\
			Child[9]=SelectHeatSeekMoveNoDash)

+Behaviors=(BehaviorName=WarlockReaction, NodeType=Selector, Child[0]=TrySpectralArmyIfFlanked, Child[1]=DoIfFlankedPrimeFallback, Child[2]=NeedsReload, Child[3]=TryCombatReadinessIfMobDebuffed, Child[4]=TryTriggerDamagedTeleportIfFlanked, Child[5]=TryCorress,  Child[6]=TryCombatReadiness)

+Behaviors=(BehaviorName=SelectAbility-AmmoDump_LW, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-ShieldAlly, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-AmmoDump_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-ShieldAlly, NodeType=Condition)
+Behaviors=(BehaviorName=TrySpectralArmyIfFlanked, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=TrySpectralArmy)

+Behaviors=(BehaviorName=TryPostChosenSuperiority, NodeType=Sequence, Child[0]=WasLastAbility-StandardShot, Child[1]=ChosenWarlockLastActionSelector)

; AmmoDump
; Target validation is handled by the ability itself, this just picks a semi-random valid target
+Behaviors=(BehaviorName=TryAmmoDump, NodeType=Sequence, Child[0]=IsAbilityAvailable-AmmoDump_LW, Child[1]=SelectTargetForAmmoDump, Child[2]=SelectAbility-AmmoDump_LW)
+Behaviors=(BehaviorName=SelectTargetForAmmoDump, NodeType=Sequence, Child[0]=SetTargetStack-AmmoDump_LW, Child[1]=ScoreAllTargets_AmmoDump_LW, Child[2]=HasValidTarget-AmmoDump_LW)
+Behaviors=(BehaviorName=SetTargetStack-AmmoDump_LW, NodeType=Action)
+Behaviors=(BehaviorName=ScoreAllTargets_AmmoDump_LW, NodeType=RepeatUntilFail, Child[0]=ScoreTarget_AmmoDumpLoop)
+Behaviors=(BehaviorName=HasValidTarget-AmmoDump_LW, NodeType=Condition)
+Behaviors=(BehaviorName=ScoreTarget_AmmoDumpLoop, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreTarget_AmmoDumpScoring, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreTarget_AmmoDumpScoring, NodeType=Successor, Child[0]=ScoreAmmoDumpOption)
+Behaviors=(BehaviorName=ScoreAmmoDumpOption, NodeType=Sequence, Child[0]=TargetIsEnemy, Child[1]=TargetNotLost, Child[2]=TargetNotMilitia, Child[3]=TargetIsNotCivilian, Child[4]=AmmoDumpClassScoring, Child[5]=TargetScoreHighestSoldierRank, Child[6]=SometimesRandomizeTarget, Child[7]=AvoidBoundAndPanickedTargets)
+Behaviors=(BehaviorName=AmmoDumpClassScoring, NodeType=Selector, Child[0]=IfShinobiAvoidDump, Child[1]=IfTemplarScoreOutDump, Child[2]=IfSniperAddDump, Child[3]=AddToTargetScore_0)
+Behaviors=(BehaviorName=IfShinobiAvoidDump, NodeType=Sequence, Child[0]=TargetIsSoldierClass-LWS_Shinobi, Child[1]=AddToTargetScore_-10)
+Behaviors=(BehaviorName=IfTemplarScoreOutDump, NodeType=Sequence, Child[0]=TargetIsSoldierClass-Templar, Child[1]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=IfSniperAddDump, NodeType=Sequence, Child[0]=TargetIsSoldierClass-LWS_Sharpshooter, Child[1]=AddToTargetScore_5)
+Behaviors=(BehaviorName=TargetIsSoldierClass-LWS_Shinobi, NodeType=Condition)
+Behaviors=(BehaviorName=TargetIsSoldierClass-Templar, NodeType=Condition)
+Behaviors=(BehaviorName=TargetIsSoldierClass-LWS_Sharpshooter, NodeType=Condition)

; ShieldAlly
+Behaviors=(BehaviorName=TryShieldAlly, NodeType=Sequence, Child[0]=IsAbilityAvailable-ShieldAlly, Child[1]=SelectTargetForShieldAlly, Child[2]=SelectAbility-ShieldAlly)
+Behaviors=(BehaviorName=SelectTargetForShieldAlly, NodeType=Sequence, Child[0]=SetTargetStack-ShieldAlly, Child[1]=ScoreAllTargets_ShieldAlly, Child[2]=HasValidTarget-ShieldAlly)
+Behaviors=(BehaviorName=SetTargetStack-ShieldAlly, NodeType=Action)
+Behaviors=(BehaviorName=ScoreAllTargets_ShieldAlly, NodeType=RepeatUntilFail, Child[0]=ScoreTarget_ShieldAllyLoop)
+Behaviors=(BehaviorName=HasValidTarget-ShieldAlly, NodeType=Condition)
+Behaviors=(BehaviorName=ScoreTarget_ShieldAllyLoop, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreTarget_ShieldAllyScoring, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreTarget_ShieldAllyScoring, NodeType=Successor, Child[0]=ScoreShieldAllyOption)
+Behaviors=(BehaviorName=ScoreShieldAllyOption, NodeType=Sequence, Child[0]=TargetNotShielded, Child[1]=TargetNotLost, Child[2]=TargetNotMilitia, Child[3]=TargetNotMindControlled, Child[4]=ScorePriestPriority, Child[5]=ScoreVisibleToPlayerPriority, Child[6]=TargetScoreHealth_HighFirst, Child[7]=SometimesRandomizeTarget)
+Behaviors=(BehaviorName=TargetAffectedByEffect-EnergyShieldEffect, NodeType=Condition)
+Behaviors=(BehaviorName=TargetNotShielded, NodeType=Inverter, Child[0]=TargetAffectedByEffect-EnergyShieldEffect)
+Behaviors=(BehaviorName=TargetNotLost, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_TheLost)
+Behaviors=(BehaviorName=TargetNotMilitia, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_Resistance)
+Behaviors=(BehaviorName=ScorePriestPriority, NodeType=Selector, Child[0]=PriestPriorityScore, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=PriestPriorityScore, NodeType=Sequence, Child[0]=IsTargetPriest, Child[1]=AddToTargetScore_10)
+Behaviors=(BehaviorName=IsTargetPriest, NodeType=Selector, Child[0]=TargetTemplateNameIs-AdvPriestM1, Child[1]=TargetTemplateNameIs-AdvPriestM2, Child[2]=TargetTemplateNameIs-AdvPriestM3)
+Behaviors=(BehaviorName=ScoreVisibleToPlayerPriority, NodeType=Selector, Child[0]=VisibleToPlayerPriorityScore, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=VisibleToPlayerPriorityScore, NodeType=Sequence, Child[0]=TargetIsVisibleToPlayer, Child[1]=AddToTargetScore_100)

+Behaviors=(BehaviorName=TargetTemplateNameIs-AdvPriestM1, NodeType=Condition)
+Behaviors=(BehaviorName=TargetTemplateNameIs-AdvPriestM2, NodeType=Condition)
+Behaviors=(BehaviorName=TargetTemplateNameIs-AdvPriestM3, NodeType=Condition)

-Behaviors=(BehaviorName=EvaluateForTeleportAlly, NodeType=Sequence, Child[0]=TargetHasRevealed, Child[1]=TargetNotFlanking, Child[2]=TargetNotSpectral, Child[3]=GenericScoreTargetRandomlySequence)
+Behaviors=(BehaviorName=EvaluateForTeleportAlly, NodeType=Sequence, Child[0]=TargetHasRevealed, Child[1]=TargetNotFlanking, Child[2]=TargetNotSpectral, Child[3]=TargetIsNotMelee, Child[4]=TargetIsNotCocoon, Child[5]=TargetIsNotInFirstCombatTurn, Child[6]=GenericScoreTargetRandomlySequence)
+Behaviors=(BehaviorName=TargetIsNotInFirstCombatTurn, NodeType=TargetStatCondition, Param[0]=TurnsEngaged, Param[1]=">=", Param[2]="2")

+Behaviors=(BehaviorName=TargetIsNotCocoon, NodeType=Inverter, Child[0]=TargetTemplateNameIs-ChryssalidCocoon)
+Behaviors=(BehaviorName=TargetTemplateNameIs-ChryssalidCocoon, NodeType=Condition)

+Behaviors=(BehaviorName=TargetIsNotMelee, NodeType=Inverter, Child[0]=IsTargetMeleeUnitOnly)

+Behaviors=(BehaviorName=TeleportAllyShooterTree, NodeType=Selector, Child[0]=ShootWhenKillShot, Child[1]=ShootWhenFlanking, Child[2]=ShootWhenSureShot, Child[3]=TryShootOrReloadOrOverwatch)

; CHOSEN ASSASSIN
-Behaviors=(BehaviorName="ChosenAssassin::CharacterRoot", NodeType=Selector, Child[0]=ChosenUnactivated, Child[1]=ChosenActivated, Child[2]=ChosenEngaged, Child[3]=SkipMove)
-Behaviors=(BehaviorName="ChosenAssassin::ChosenEngaged", NodeType=Selector, Child[0]=PostBendingReedSkip, Child[1]=StealthAssassinBranch, Child[2]=VisibleAssassinBranch, Child[3]=TryShootOrReload, Child[4]=TryOverwatch, Child[5]=SkipMove)

-Behaviors=(BehaviorName=TryVanishingWind, NodeType=Sequence, Child[0]=IsAbilityAvailable-VanishingWind, Child[1]=TargetsExistForAoE-HarborWaveProfile, Child[2]=SelectAbility-VanishingWind, Child[3]=SSSetAssassinCycle1IfNotSet)
+Behaviors=(BehaviorName=TryVanishingWind, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=IsAbilityAvailable-VanishingWind, Child[2]=SelectAbility-VanishingWind)

+Behaviors=(BehaviorName=NotAffectedByVanishingWind, NodeType=Inverter, Child[0]=AffectedByEffect-VanishingWind)

-Behaviors=(BehaviorName=TryPartingSilk, NodeType=Sequence, Child[0]=IsAbilityAvailable-PartingSilk, Child[1]=ChosenSafeToMove, Child[2]=FindPartingSilkTarget, Child[3]=SelectAbility-PartingSilk, Child[4]=DisableExtractThisTurn)
+Behaviors=(BehaviorName=TryPartingSilk, NodeType=Sequence, Child[0]=IsAbilityAvailable-PartingSilk, Child[1]=FindPartingSilkTarget, Child[2]=SelectAbility-PartingSilk)

-Behaviors=(BehaviorName=SelectBestTargetForPartingSilk, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialMeleeTarget)
+Behaviors=(BehaviorName=SelectBestTargetForPartingSilk, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialMeleeTargetSmart)
+Behaviors=(BehaviorName=EvaluatePotentialMeleeTargetSmart, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHitChance, Child[2]=TargetScoreHealth, Child[3]=AvoidBoundAndPanickedTargets, Child[4]=SSCustomMeleeTargetScore, Child[5]=UpdateBestTarget)

+Behaviors=(BehaviorName="ChosenAssassin::CharacterRoot", NodeType=Selector, Child[0]="::ChosenEngaged")
+Behaviors=(BehaviorName="ChosenAssassin::ChosenEngaged", NodeType=Selector, Child[0]=TryLWChosenkidnap, Child[1]=TryPostChosenHNR, Child[2]=ChosenAssassinStealthBranch, Child[3]=ChosenAssassinFirstAction, Child[4]=ChosenAssassinLastAction, Child[5]=SkipMove)

+Behaviors=(BehaviorName=TryPriorityHarborWave, NodeType=Sequence, Child[0]=NotAffectedByVanishingWind, Child[1]=HarborWave_HitIdealTarget, Child[2]=SelectAbility-HarborWave, Child[3]=SSSetAssassinCycle3IfNotSet)
+Behaviors=(BehaviorName=TryStandardHarborWave, NodeType=Sequence, Child[0]=NotAffectedByVanishingWind, Child[1]=TryHarborWave)

-Behaviors=(BehaviorName=FirstTurnMoveForPriorityHarborWave, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ChosenSafeToMove, Child[2]=IsAbilityAvailable-StandardMove, Child[3]=FindMultiTargetDestination-HarborWavePrefTargetProfile, Child[4]=SelectAbility-StandardMove, Child[5]=SSSetPreselectedAbility-HarborWave)
+Behaviors=(BehaviorName=FirstTurnMoveForPriorityHarborWave, NodeType=Sequence, Child[0]=IsAbilityAvailable-HarborWave, Child[1]=NotLastActionPoint, Child[2]=ChosenSafeToMove, Child[3]=IsAbilityAvailable-StandardMove, Child[4]=FindMultiTargetDestination-HarborWavePrefTargetProfile, Child[5]=SelectAbility-StandardMove, Child[6]=SSSetPreselectedAbility-HarborWave)

+Behaviors=(BehaviorName="ChosenAssassinFirstActionSelector", NodeType=Selector, \\
			Child[0]=TryGrenade, \\
			Child[1]=TrySlash, \\
			Child[2]=ShootWhenKillShot, \\
			Child[3]=FirstTurnMoveForPriorityHarborWave, \\
			Child[4]=ShootwhenFlanking, \\
			Child[5]=TryPartingSilk, \\
			Child[6]=ShootWhenSureShot, \\
			Child[7]=TryVanishingWind, \\
			Child[8]=ChosenCheatIfNoVisible, \\
			Child[9]=HuntEnemy)

+Behaviors=(BehaviorName="ChosenAssassinLastActionSelector", NodeType=Selector, \\
			Child[0]=TryGrenade, \\
			Child[1]=TryPriorityHarborWave, \\
			Child[2]=ShootWhenKillShot, \\
			Child[3]=ShootwhenFlanking, \\
			Child[4]=TryPartingSilk, \\
			Child[5]=TakePriorityshotsChosen, \\
			Child[6]=TryHarborWave, \\
			Child[7]=TryShootOrReloadOrOverwatch, \\
			Child[8]=ChosenCheatIfNoVisible, \\
			Child[9]=HuntEnemy)

+Behaviors=(BehaviorName=TryPostChosenHNR, NodeType=Sequence, Child[0]=WasLastAbility-StandardShot, Child[1]=ChosenHNRSelector)

+Behaviors=(BehaviorName="ChosenHNRSelector", NodeType=Selector, \\
			Child[0]=TryPartingSilk, \\
			Child[1]=DoIfFlankedMove, \\
			Child[2]=TryStandardHarborWave, \\
			Child[3]=TryShootOrReloadOrOverwatch, \\
			Child[4]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=NCMoveFlankingUnsafeRestricted, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SetNoCoverMovement, Child[3]=RestrictToFlanking, Child[4]=FindRestrictedDestination-MWP_Flanking, Child[5]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=AssassinTakePriorityShotsChosen, NodeType=Sequence, Child[0]=NotAffectedByVanishingWind, Child[1]=TakePriorityshotsChosen)
+Behaviors=(BehaviorName=AssassinShootWhenKillShot, NodeType=Sequence, Child[0]=NotAffectedByVanishingWind, Child[1]=ShootWhenKillShot)
+Behaviors=(BehaviorName=MaybeTryReveal, NodeType=RandFilter, Child[0]=TryVanishReveal, Param[0]=50)
+Behaviors=(BehaviorName=MaybeFirstTurnMoveForPriorityHarborWave, NodeType=RandFilter, Child[0]=FirstTurnMoveForPriorityHarborWave, Param[0]=50)
+Behaviors=(BehaviorName=MaybeAssassinReveal, NodeType=Sequence, Child[0]=AffectedByEffect-VanishingWind, Child[1]=IsLastActionPoint, Child[2]=MaybeTryReveal)

; Prevent Assassin from revealing herself with last move unnecessarily
;Intentionally make her not prioritize shotgun shots from stealth
+Behaviors=(BehaviorName=ChosenAssassinStealthBranch, NodeType=Sequence, Child[0]=AffectedByEffect-VanishingWind, Child[1]=ChosenAssassinStealthActionSelector)
+Behaviors=(BehaviorName=ChosenAssassinStealthActionSelector, NodeType=Selector, \\
			Child[0]=TryPartingSilk, \\
			Child[1]=ChosenCheatIfNoVisible, \\
			Child[2]=MaybeAssassinReveal, \\
			Child[3]=MaybeFirstTurnMoveForPriorityHarborWave, \\
			Child[4]=AssassinShootWhenKillShot, \\
			Child[5]=AssassinTakePriorityShotsChosen, \\
			Child[6]=TryPriorityHarborWave, \\
			Child[7]=SelectHeatSeekMoveNoDash)

+Behaviors=(BehaviorName=TryCombatReadinessIfMobDebuffed, NodeType=Sequence, Child[0]=IsMobDebuffed, Child[1]=TryCombatReadiness)
+Behaviors=(BehaviorName=IsMobDebuffed, NodeType=Selector, Child[0]=AffectedByEffect-Maim_Immobilize)

+Behaviors=(BehaviorName=AffectedByEffect-Maim_Immobilize, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Poisoned, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-IronCurtainEffect, NodeType=Condition)

+Behaviors=(BehaviorName=AssassinReaction, NodeType=Selector, Child[0]=TrySlash, Child[1]=TryCombatReadinessIfMobDebuffed, Child[2]=NeedsReload, Child[3]=MoveForMeleeAssassin, Child[4]=HuntEnemyUnsafe, Child[5]=TryTriggerDamagedTeleportIfFlanked,  Child[6]=TryCombatReadiness)
+Behaviors=(BehaviorName=SkipMoveIfLastAction, NodeType=Selector, Child[0]=IsLastActionPoint, Child[1]=SkipMove)

+Behaviors=(BehaviorName=IsAbilityAvailable-TriggerDamagedTeleport_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-TriggerDamagedTeleport_LW, NodeType=Action)
+Behaviors=(BehaviorName=TryTriggerDamagedTeleport_LW, NodeType=Sequence, Child[0]=IsAbilityAvailable-TriggerDamagedTeleport_LW, Child[1]=SelectAbility-TriggerDamagedTeleport_LW)
+Behaviors=(BehaviorName=TryTriggerDamagedTeleportIfFlanked, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=TryTriggerDamagedTeleport_LW)

+Behaviors=(BehaviorName=HuntEnemyUnsafeIgnoreHazards, NodeType=Sequence, Child[0]=SetAlertDataStack, Child[1]=GenericSelectBestAlert, Child[2]=HasValidAlertDataLocation, Child[3]=MoveStandardWithDestinationUnsafeIgnoreHazards)
+Behaviors=(BehaviorName=MoveStandardWithDestinationUnsafeIgnoreHazards, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=IgnoreHazards, Child[2]=HasValidAlertDataLocation, Child[3]=FindAlertDataMovementDestination, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=MoveForMeleeAssassin, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindMeleeDestinationAssassin, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveForMeleeAssassinIgnoreHazards, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindMeleeDestinationAssassin, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=FindMeleeDestinationAssassin, NodeType=Sequence, Child[0]=SelectPotentialMeleeTarget_ASS, Child[1]=RestrictToPotentialTargetRange-AssassinSlash_LW, Child[2]=FindRestrictedDestination-MWP_MeleeFanatic)
+Behaviors=(BehaviorName=RestrictToPotentialTargetRange-AssassinSlash_LW, NodeType=Action)

+Behaviors=(BehaviorName=TargetAffectedByEffect-Stasis, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Sustain, NodeType=Condition)


+Behaviors=(BehaviorName=SSScoreTargetIfStasised, NodeType=Successor, Child[0]=ScoreTargetIfStasised)

+Behaviors=(BehaviorName=ScoreTargetIfStasised, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Stasis, Child[1]=AddToTargetScore_-5000)

+Behaviors=(BehaviorName=SSScoreTargetIfSustained, NodeType=Successor, Child[0]=ScoreTargetIfSustained)

+Behaviors=(BehaviorName=ScoreTargetIfSustained, NodeType=Sequence, Child[0]=TargetAffectedByEffect-Sustain, Child[1]=AddToTargetScore_-5000)


+Behaviors=(BehaviorName=SelectPotentialMeleeTarget_ASS, NodeType=Sequence, Child[0]=SetPotentialTargetStack, Child[1]=SelectBestPotentialTargetForMelee_ASS, Child[2]=HasValidTarget-Potential)


+Behaviors=(BehaviorName=SelectBestPotentialTargetForMelee_ASS, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialMeleeTarget_ASS)
+Behaviors=(BehaviorName=EvaluatePotentialMeleeTarget_ASS, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=SSScoreTargetIfSustained, Child[4]=SSScoreTargetIfStasised, Child[5]=TargetScoreCivilian, Child[6]=SSCustomMeleeTargetScore, Child[7]=UpdateBestTarget)

+Behaviors=(BehaviorName=ChosenAssassinFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ChosenAssassinFirstActionSelector)
+Behaviors=(BehaviorName=ChosenAssassinLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ChosenAssassinLastActionSelector)

+Behaviors=(BehaviorName=TrySlash, NodeType=Sequence, Child[0]=IsAbilityAvailable-AssassinSlash_LW, Child[1]=SetTargetStack-AssassinSlash_LW, Child[2]=GenericSelectBestTarget, Child[3]=HasValidTarget-AssassinSlash_LW,  Child[4]=SelectAbility-AssassinSlash_LW)

+Behaviors=(BehaviorName=IsAbilityAvailable-AssassinSlash_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-AssassinSlash_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-AssassinSlash_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-AssassinSlash_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-AssassinSlash_LW, NodeType=Action)


; CHOSEN HUNTER

-Behaviors=(BehaviorName="ChosenSniper::CharacterRoot", NodeType=Selector, Child[0]=ChosenUnactivated, Child[1]=ChosenActivated, Child[2]=ChosenEngaged, Child[3]=SkipMove)
-Behaviors=(BehaviorName="ChosenSniper::ChosenEngaged", NodeType=Selector,        Child[0]=OverwatchHandlerShootOverwatcherOption,        Child[1]=TryGrappleTowardDazed,        Child[2]=TryTrackingShotIfFirstAction,        Child[3]=TryChosenSummon,        Child[4]=TryGrappleForOffense,       Child[5]=TryMoveThenGrenade,       Child[6]=TryMoveThenGrenadeAny30,       Child[7]=DoIfFlankedOrFirstActionMoveHeight,        Child[8]=TryLethalDose,        Child[9]=TryMoveThenGrenadeAny,       Child[10]=TryHunterRifle,        Child[11]=TryQuickDraw,        Child[12]=TryOverwatch,        Child[13]=OverwatchHandlerBackupOption,        Child[14]=HuntEnemyWithCover,        Child[15]=SkipMove)

+Behaviors=(BehaviorName="ChosenSniper::CharacterRoot", NodeType=Selector, Child[0]="::ChosenEngaged")
+Behaviors=(BehaviorName="ChosenSniper::ChosenEngaged", NodeType=Selector, Child[0]=TryLWChosenkidnap, Child[1]=ChosenSniperFirstAction, Child[2]=ChosenSniperLastAction)

+Behaviors=(BehaviorName="TryTrackingShotLW", NodeType=Sequence, Child[0]=IsAbilityAvailable-TrackingShot_LW, Child[1]=SetTargetStack-TrackingShot_LW, Child[2]=SelectEnemyTargetRandomly_NonCivilianOrVIP, Child[3]=HasValidTarget-TrackingShot_LW, Child[4]=SelectAbility-TrackingShot_LW)

+Behaviors=(BehaviorName=IsAbilityAvailable-TrackingShot_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-TrackingShot_LW, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-TrackingShot_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-TrackingShot_LW, NodeType=Action)

+Behaviors=(BehaviorName="ChosenSniperFirstActionSelector", NodeType=Selector, \\
			Child[0]=TryTrackingShotLW,\\
			Child[1]=TryGrenade,\\
            Child[2]=TryLightningHands, \\
            Child[3]=ShootWhenFlanking_Pistol, \\
            Child[4]=TryGrappleForOffense,\\
            Child[5]=DoIfFlankedFallback, \\
            Child[6]=TryFaceoff, \\
            Child[7]=TakePriorityshotsChosen_Pistol, \\
            Child[8]=HunterTakePriorityshotsChosen, \\
            Child[9]=MoveChosenStayBack, \\
			Child[10]=MaybeTryPistolShot, \\
			Child[11]=MaybeTryHunterRifle, \\
			Child[12]=ChosenCheatIfNoVisible, \\
            Child[13]=TryShootOrReloadOrOverwatch,\\
            Child[14]=HuntEnemy)

+Behaviors=(BehaviorName="ChosenSniperLastActionSelector", NodeType=Selector, \\
			Child[0]=TryGrenade,\\
            Child[1]=TryLightningHands, \\
            Child[2]=TryFanFire, \\
            Child[3]=TryGrappleForOffense,\\
            Child[4]=HunterTakePriorityshotsChosen, \\
            Child[5]=ShootWhenKillShot_Pistol, \\
            Child[6]=ShootWhenFlanking_Pistol, \\
            Child[7]=DoIfFlankedFallback, \\
			Child[8]=MaybeTryHunterRifle, \\
            Child[9]=TryShootOrReloadOrOverwatch,\\
            Child[10]=SelectHeatSeekMoveNoDash)

+Behaviors=(BehaviorName=HunterReaction, NodeType=Selector, Child[0]=HunterFlankedPrimeMove, Child[1]=MaybeMoveIfNotFlanked, Child[2]=TryCombatReadinessIfMobDebuffed, Child[3]=TryTriggerDamagedTeleportIfFlanked, Child[4]=TryCombatReadiness)

+Behaviors=(BehaviorName=MaybeMoveIfNotFlanked, NodeType=RandFilter, Child[0]=HunterPrimeMoveOffensive, Param[0]=50)

+Behaviors=(BehaviorName=ChosenSniperLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ChosenSniperLastActionSelector)
+Behaviors=(BehaviorName=ChosenSniperFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ChosenSniperFirstActionSelector)

; The Hunter will take any flankshots offered, but otherwise will tend to go showboating off instead if he feels like it. Grapple Ho! 

+Behaviors=(BehaviorName=TakePriorityshotsChosen, NodeType=Selector, Child[0]=ShootWhenKillShot, Child[1]=ShootWhenFlanking, Child[2]=ShootWhenSureShot)
+Behaviors=(BehaviorName=TakePriorityshotsChosen_Pistol, NodeType=Selector, Child[0]=ShootWhenKillShot_Pistol, Child[1]=ShootWhenFlanking_Pistol, Child[2]=ShootWhenSureShot_Pistol)

+Behaviors=(BehaviorName=HunterTakePriorityshotsChosen, NodeType=Selector, Child[0]=HunterShootWhenKillShot, Child[1]=HunterShootWhenFlanking, Child[2]=HunterShootWhenSureShot)

+Behaviors=(BehaviorName=MaybeTryPistolShot, NodeType=RandFilter, Child[0]=TryQuickDraw, Param[0]=60)
+Behaviors=(BehaviorName=MaybeTryHunterRifle, NodeType=RandFilter, Child[0]=TryHunterRifle, Param[0]=70)

; Hunter can ger Faceoff from the perk list
+Behaviors=(BehaviorName=TryFaceoff, NodeType=Sequence, Child[0]=IsAbilityAvailable-Faceoff, Child[1]=MoreThanThreeEnemiesVisible, Child[2]=SelectTargetForFaceoff, Child[3]=SelectAbility-Faceoff)
+Behaviors=(BehaviorName=IsAbilityAvailable-Faceoff, NodeType=Condition)
+Behaviors=(BehaviorName=MoreThanThreeEnemiesVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">", Param[2]=3)
+Behaviors=(BehaviorName=SelectTargetForFaceoff, NodeType=Sequence, Child[0]=SetTargetStack-Faceoff, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-Faceoff)
+Behaviors=(BehaviorName=SetTargetStack-Faceoff, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-Faceoff, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Faceoff, NodeType=Action)

; Hunter can ger Lightning hands from the perk list
+Behaviors=(BehaviorName=TryLightningHands, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightningHands, Child[1]=ShootWhenKillShot_LightningHands, Child[2]=ShootWhenFlanking_LightningHands, Child[3]=ShootWhenSureShot_LightningHands)
+Behaviors=(BehaviorName=SetTargetStack-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-LightningHands, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-LightningHands, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-LightningHands, NodeType=Condition)

; Hunter can ger Fan Fire from the perk list
+Behaviors=(BehaviorName=TryFanFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-FanFire, Child[1]=ShootWhenKillShot_FanFire, Child[2]=ShootWhenFlanking_FanFire, Child[3]=ShootWhenSureShot_FanFire)
+Behaviors=(BehaviorName=SetTargetStack-FanFire, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-FanFire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-FanFire, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-FanFire, NodeType=Condition)


;Grapple does not trigger OW, so there is no need to check if it's safe
-Behaviors=(BehaviorName=TryGrappleForOffense, NodeType=Sequence, Child[0]=ChosenSafeToMove, Child[1]=IsAbilityAvailable-HunterGrapple, Child[2]=FindOffensiveGrappleDestination, Child[3]=SelectAbility-HunterGrapple)
+Behaviors=(BehaviorName=TryGrappleForOffense, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunterGrapple, Child[1]=FindOffensiveGrappleDestination, Child[2]=SelectAbility-HunterGrapple)

; movement StayBack for Hunter
+Behaviors=(BehaviorName=FindDestinationWithLoS-ChosenStayBack, NodeType=Action)
+Behaviors=(BehaviorName=MoveChosenStayBack, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=MoveChosenStayBackUnsafe)
+Behaviors=(BehaviorName=MoveChosenStayBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-ChosenStayBack, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=DoIfFlankedMove_ChosenStayBack, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=TryGrappleForAway, Child[2]=MoveChosenStayBackUnsafe)

+Behaviors=(BehaviorName=DoIfFlankedMoveHeight, NodeType=Sequence, Child[0]=ChosenSafeToMove, Child[1]=CheckIfNeedToMove, Child[2]=FlankedMoveSelectorHeight)

+Behaviors=(BehaviorName=DoIfFlankedFallback, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=Fallback)

+Behaviors=(BehaviorName=TryGrappleForAway, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=IsAbilityAvailable-HunterGrapple, Child[2]=FindFarAwayGrappleDestination, Child[3]=SelectAbility-HunterGrapple)
+Behaviors=(BehaviorName=FindFarAwayGrappleDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-HunterGrapple, Child[2]=UseDashMovement, Child[3]=RestrictToUnflanked, Child[4]=FindDestinationWithLoS-MWP_GrappleAway)
+Behaviors=(BehaviorName=FindDestinationWithLoS-MWP_GrappleAway, NodeType=Action)

; PISTOL
; +++ Prio: Shoot when Flanking and CTH > 80
+Behaviors=(BehaviorName=ShootWhenFlanking_Pistol, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolStandardShot, Child[1]=SelectFlankedEnemyTarget_Pistol, Child[2]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=SelectFlankedEnemyTarget_Pistol, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=EvaluateFlankedEnemyTargets_LWOTC, Child[2]=HasValidTarget-PistolStandardShot)

; +++ Prio: Shoot when KillShot and CTH > 80
+Behaviors=(BehaviorName=ShootWhenKillShot_Pistol, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolStandardShot, Child[1]=SelectKillShotEnemyTarget_Pistol, Child[2]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_Pistol, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=EvaluateKillShotEnemyTargets_LWOTC, Child[2]=HasValidTarget-PistolStandardShot)

; +++ Prio: Shoot when sure shot (CTH > 80)
+Behaviors=(BehaviorName=ShootWhenSureShot_Pistol, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolStandardShot, Child[1]=SelectSureShotEnemyTarget_Pistol, Child[2]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=SelectSureShotEnemyTarget_Pistol, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=EvaluateSureShotEnemyTargets_LWOTC, Child[2]=HasValidTarget-PistolStandardShot)

;LightningHands
+Behaviors=(BehaviorName=ShootWhenFlanking_LightningHands, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightningHands, Child[1]=SelectFlankedEnemyTarget_LightningHands, Child[2]=SelectAbility-LightningHands)
+Behaviors=(BehaviorName=SelectFlankedEnemyTarget_LightningHands, NodeType=Sequence, Child[0]=SetTargetStack-LightningHands, Child[1]=EvaluateFlankedEnemyTargets_LWOTC, Child[2]=HasValidTarget-LightningHands)

; +++ Prio: Shoot when KillShot and CTH > 80
+Behaviors=(BehaviorName=ShootWhenKillShot_LightningHands, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightningHands, Child[1]=SelectKillShotEnemyTarget_LightningHands, Child[2]=SelectAbility-LightningHands)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_LightningHands, NodeType=Sequence, Child[0]=SetTargetStack-LightningHands, Child[1]=EvaluateKillShotEnemyTargets_LWOTC, Child[2]=HasValidTarget-LightningHands)

; +++ Prio: Shoot when sure shot (CTH > 80)
+Behaviors=(BehaviorName=ShootWhenSureShot_LightningHands, NodeType=Sequence, Child[0]=IsAbilityAvailable-LightningHands, Child[1]=SelectSureShotEnemyTarget_LightningHands, Child[2]=SelectAbility-LightningHands)
+Behaviors=(BehaviorName=SelectSureShotEnemyTarget_LightningHands, NodeType=Sequence, Child[0]=SetTargetStack-LightningHands, Child[1]=EvaluateSureShotEnemyTargets_LWOTC, Child[2]=HasValidTarget-LightningHands)

;Fan Fire
+Behaviors=(BehaviorName=ShootWhenFlanking_FanFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-FanFire, Child[1]=SelectFlankedEnemyTarget_FanFire, Child[2]=SelectAbility-FanFire)
+Behaviors=(BehaviorName=SelectFlankedEnemyTarget_FanFire, NodeType=Sequence, Child[0]=SetTargetStack-FanFire, Child[1]=EvaluateFlankedEnemyTargets_LWOTC, Child[2]=HasValidTarget-FanFire)

; +++ Prio: Shoot when KillShot and CTH > 80
+Behaviors=(BehaviorName=ShootWhenKillShot_FanFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-FanFire, Child[1]=SelectKillShotEnemyTarget_FanFire, Child[2]=SelectAbility-FanFire)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_FanFire, NodeType=Sequence, Child[0]=SetTargetStack-FanFire, Child[1]=EvaluateKillShotEnemyTargets_LWOTC, Child[2]=HasValidTarget-FanFire)

; +++ Prio: Shoot when sure shot (CTH > 80)
+Behaviors=(BehaviorName=ShootWhenSureShot_FanFire, NodeType=Sequence, Child[0]=IsAbilityAvailable-FanFire, Child[1]=SelectSureShotEnemyTarget_FanFire, Child[2]=SelectAbility-FanFire)
+Behaviors=(BehaviorName=SelectSureShotEnemyTarget_FanFire, NodeType=Sequence, Child[0]=SetTargetStack-FanFire, Child[1]=EvaluateSureShotEnemyTargets_LWOTC, Child[2]=HasValidTarget-FanFire)

;Generic
+Behaviors=(BehaviorName=TryLWChosenkidnap, NodeType=Sequence, Child[0]=IsAbilityAvailable-ChosenKidnap, Child[1]=SetTargetStack-ChosenKidnap, Child[2]=GenericSelectBestTarget, Child[3]=HasValidTarget-ChosenKidnap,  Child[4]=SelectAbility-ChosenKidnap)

+Behaviors=(BehaviorName=IsAbilityAvailable-ChosenKidnap, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-ChosenKidnap, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-ChosenKidnap, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-ChosenKidnap, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-ChosenKidnap, NodeType=Action)

; +++ Prio: Shoot when Flanking and CTH > 80
+Behaviors=(BehaviorName=ShootWhenFlanking, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget_LWOTC, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectFlankedEnemyTarget_LWOTC, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateFlankedEnemyTargets_LWOTC, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateFlankedEnemyTargets_LWOTC, NodeType=RepeatUntilFail, Child[0]=EvaluateFlankedEnemies_LWOTC)
+Behaviors=(BehaviorName=EvaluateFlankedEnemies_LWOTC, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreFlankedEnemy_LWOTC, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreFlankedEnemy_LWOTC, NodeType=Successor, Child[0]=ScoreFlankedEnemy_LWOTC)
+Behaviors=(BehaviorName=ScoreFlankedEnemy_LWOTC, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsNotCivilian, Child[2]=TargetHasNoShield, Child[3]=TargetIsEnemy, Child[4]=TargetHitChanceHigh, Child[5]=TargetNotBoundorPanicked, Child[6]=GenericTargetEvaluations)
+Behaviors=(BehaviorName=TargetHitChanceNotLow, NodeType=Inverter, Child[0]=TargetHitChanceLow) ; <-- CTH > 40

; +++ Prio: Shoot when KillShot and CTH > 80
+Behaviors=(BehaviorName=ShootWhenKillShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectKillShotEnemyTarget_LWOTC, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_LWOTC, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateKillShotEnemyTargets_LWOTC, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateKillShotEnemyTargets_LWOTC, NodeType=RepeatUntilFail, Child[0]=EvaluateKillShotEnemies_LWOTC)
+Behaviors=(BehaviorName=EvaluateKillShotEnemies_LWOTC, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreKillShotEnemy_LWOTC, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreKillShotEnemy_LWOTC, NodeType=Successor, Child[0]=ScoreKillShotEnemy_LWOTC)
+Behaviors=(BehaviorName=ScoreKillShotEnemy_LWOTC, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=TargetIsNotCivilian, Child[2]=TargetIsEnemy, Child[3]=TargetHitChanceHigh, Child[4]=TargetNotBoundorPanicked, Child[5]=GenericTargetEvaluations)

; +++ Prio: Shoot when sure shot (CTH > 80)
+Behaviors=(BehaviorName=ShootWhenSureShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectSureShotEnemyTarget_LWOTC, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectSureShotEnemyTarget_LWOTC, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateSureShotEnemyTargets_LWOTC, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateSureShotEnemyTargets_LWOTC, NodeType=RepeatUntilFail, Child[0]=EvaluateSureShotEnemies_LWOTC)
+Behaviors=(BehaviorName=EvaluateSureShotEnemies_LWOTC, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreSureShotEnemy_LWOTC, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreSureShotEnemy_LWOTC, NodeType=Successor, Child[0]=ScoreSureShotEnemy_LWOTC)
+Behaviors=(BehaviorName=ScoreSureShotEnemy_LWOTC, NodeType=Sequence, Child[0]=TargetHitChanceHigh, Child[1]=TargetIsNotCivilian, Child[2]=TargetIsEnemy, Child[3]=TargetNotBoundorPanicked, Child[4]=GenericTargetEvaluations)

; Hunter specific ones using HunterRifleShot:

; +++ Prio: Shoot when Flanking and CTH > 80
+Behaviors=(BehaviorName=HunterShootWhenFlanking, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunterRifleShot, Child[1]=HunterSelectFlankedEnemyTarget_LWOTC, Child[2]=SelectAbility-HunterRifleShot)
+Behaviors=(BehaviorName=HunterSelectFlankedEnemyTarget_LWOTC, NodeType=Sequence, Child[0]=SetTargetStack-HunterRifleShot, Child[1]=EvaluateFlankedEnemyTargets_LWOTC, Child[2]=HasValidTarget-HunterRifleShot)

; +++ Prio: Shoot when KillShot and CTH > 80
+Behaviors=(BehaviorName=HunterShootWhenKillShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunterRifleShot, Child[1]=HunterSelectKillShotEnemyTarget_LWOTC, Child[2]=SelectAbility-HunterRifleShot)
+Behaviors=(BehaviorName=HunterSelectKillShotEnemyTarget_LWOTC, NodeType=Sequence, Child[0]=SetTargetStack-HunterRifleShot, Child[1]=EvaluateKillShotEnemyTargets_LWOTC, Child[2]=HasValidTarget-HunterRifleShot)

; +++ Prio: Shoot when sure shot (CTH > 80)
+Behaviors=(BehaviorName=HunterShootWhenSureShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunterRifleShot, Child[1]=HunterSelectSureShotEnemyTarget_LWOTC, Child[2]=SelectAbility-HunterRifleShot)
+Behaviors=(BehaviorName=HunterSelectSureShotEnemyTarget_LWOTC, NodeType=Sequence, Child[0]=SetTargetStack-HunterRifleShot, Child[1]=EvaluateSureShotEnemyTargets_LWOTC, Child[2]=HasValidTarget-HunterRifleShot)

; End Hunter Specific ones

+Behaviors=(BehaviorName=TryCombatReadiness, NodeType=Sequence, Child[0]=IsAbilityAvailable-CombatReadiness, Child[1]=SelectAbility-CombatReadiness)
+Behaviors=(BehaviorName=IsAbilityAvailable-CombatReadiness, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-CombatReadiness, NodeType=Action)

+Behaviors=(BehaviorName=TryBanzai, NodeType=Sequence, Child[0]=IsAbilityAvailable-Banzai_LW, Child[1]=SelectAbility-Banzai_LW)
+Behaviors=(BehaviorName=IsAbilityAvailable-Banzai_LW, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Banzai_LW, NodeType=Action)

; Chosen Prime Fallback
+Behaviors=(BehaviorName=DoIfFlankedPrimeFallback, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=PrimeFallBackUnsafe)


+Behaviors=(BehaviorName=PrimeFallBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindBestPrimeFallbackDestination, Child[4]=SelectAbility-StandardMove)
; Added RandomCover and Fanatic movement profiles so the AI hopefully has a position to go.
+Behaviors=(BehaviorName=FindBestPrimeFallbackDestination, NodeType=Selector, Child[0]=FindDestination-ChosenPrimeFallback, Child[1]=FindDestinationWithLoS-MWP_Defensive, Child[2]=FindDestinationWithLoS-MWP_FallBack, Child[3]=FindDestination-MWP_FallBack, Child[4]=FindDestination-MWP_Defensive, Child[5]=FindDestination-MWP_RandomCover, Child[6]=FindDestination-MWP_Fanatic)
+Behaviors=(BehaviorName=FindDestination-ChosenPrimeFallback, NodeType=Action)

; Hunter offensive prime reaction
+Behaviors=(BehaviorName=FindDestinationWithLoS-MWP_HunterFlanking, NodeType=Action)
+Behaviors=(BehaviorName=FindDestinationWithLoS-MWP_HunterAggressive, NodeType=Action)
+Behaviors=(BehaviorName=FindDestinationWithLoS-MWP_HunterForceFlank, NodeType=Action)


+Behaviors=(BehaviorName=HunterFlankedPrimeMove, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=HunterPrimeMoveOffensive)

+Behaviors=(BehaviorName=HunterPrimeMoveOffensive, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=IgnoreHazards, Child[3]=FindBestHunterPrimeDestination, Child[4]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=FindBestHunterPrimeDestination, NodeType=Selector, Child[0]=FindDestinationWithLoS-MWP_Standard, Child[1]=FindDestinationWithLoS-MWP_Defensive, Child[2]=FindDestinationWithLoS-MWP_AdvanceCover)



; Allow ChosenSafeToMove to recognize new overwatch counter strengths
-Behaviors=(BehaviorName=UpdateChosenOverwatchEffectVar, NodeType=Selector, \\
	Child[0]=ChosenOverwatch_HasShadowstep, \\
	Child[1]=ChosenOverwatch_HasOverwatchersLowHealth, \\
	Child[2]=ChosenOverwatch_MultipleOverwatchers, \\
	Child[3]=ChosenOverwatch_SingleOverwatcher, \\
	Child[4]=SetChosenOverwatchEffectNormal )
+Behaviors=(BehaviorName=UpdateChosenOverwatchEffectVar, NodeType=Selector, \\
	Child[0]=ChosenOverwatch_HasOverwatchCounter, \\
	Child[1]=ChosenOverwatch_HasOverwatchersLowHealth, \\
	Child[2]=ChosenOverwatch_MultipleOverwatchers, \\
	Child[3]=ChosenOverwatch_SingleOverwatcher, \\
	Child[4]=SetChosenOverwatchEffectNormal )
+Behaviors=(BehaviorName=ChosenOverwatch_HasOverwatchCounter, NodeType=Sequence, Child[0]=HasOverwatchCounter, Child[1]=SetChosenOverwatchEffectNormal)
+Behaviors=(BehaviorName=HasOverwatchCounter, NodeType=Selector, Child[0]=AffectedByEffect-Shadowstep, Child[1]=AffectedByEffect-LightningReflexes_LW)
+Behaviors=(BehaviorName=AffectedByEffect-LightningReflexes_LW, NodeType=Condition)

;------------------
;Civvies
;------------------
;OLD
; --------------------- Civilians ---------------------------------------------
-Behaviors=(BehaviorName=CivRoot, NodeType=Selector, Child[0]=CivCheckTerror, Child[1]=CivCheckChosenRetaliation, Child[2]=CivNormal)
-Behaviors=(BehaviorName=CivCheckTerror, NodeType=Sequence, Child[0]=IsMissionOfType-Terror, Child[1]=CivTerror)
-Behaviors=(BehaviorName=CivCheckChosenRetaliation, NodeType=Sequence, Child[0]=IsMissionOfType-ChosenRetaliation, Child[1]=SkipMove)
-Behaviors=(BehaviorName=CivTerror, NodeType=Selector, Child[0]=CivTerrorAI, Child[1]=SkipMove)
; Update - On terror maps only react to AI via BTs.  Reactions to XCom will get kicked off from Kismet for scorekeeping purposes.
-Behaviors=(BehaviorName=CivNormal, NodeType=Selector, Child[0]=CivHighSupportMove, Child[1]= CivLowSupportMove, Child[2]=SkipMove)
-Behaviors=(BehaviorName=CivHighSupportMove, NodeType=Sequence, Child[0]=HighPopularSupport, Child[1]=FindDestination-MWP_CivilianRed, Child[2]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=CivLowSupportMove, NodeType=Sequence, Child[0]=LowPopularSupport, Child[1]=FindDestination-MWP_CivilianRed, Child[2]=DoNoiseAlert, Child[3]=SelectAbility-StandardMove)

;NEW
; --------------------- Civilians ---------------------------------------------
+Behaviors=(BehaviorName=CivRoot, NodeType=Selector, Child[0]=CivCheckTerror_LW, Child[1]=CivCheckDefend_LW, Child[2]=CivCheckInvasion_LW, Child[3]=CivNormal)

+Behaviors=(BehaviorName=CivCheckTerror_LW, NodeType=Sequence, Child[0]=IsMissionOfType-Terror_LW, Child[1]=CivTerror)
+Behaviors=(BehaviorName=CivCheckDefend_LW, NodeType=Sequence, Child[0]=IsMissionOfType-Defend_LW, Child[1]=CivTerror)
+Behaviors=(BehaviorName=CivCheckInvasion_LW, NodeType=Sequence, Child[0]=IsMissionOfType-Invasion_LW, Child[1]=CivTerror)

+Behaviors=(BehaviorName=CivTerror, NodeType=Selector, Child[0]=CivTerrorAI, Child[1]=TryAllCivOptions)
; Update - On terror maps only react to AI via BTs.  Reactions to XCom will get kicked off from Kismet for scorekeeping purposes.

+Behaviors=(BehaviorName=CivNormal, NodeType=Selector, Child[0]=CivHighSupportMove, Child[1]= CivLowSupportMove, Child[2]=TryAllCivOptions)

+Behaviors=(BehaviorName=CivHighSupportMove, NodeType=Sequence, Child[0]=HighPopularSupport, Child[1]=FindDestination-MWP_CivilianRed, Child[2]=TryAllCivOptions)

+Behaviors=(BehaviorName=CivLowSupportMove, NodeType=Sequence, Child[0]=LowPopularSupport, Child[1]=FindDestination-MWP_CivilianRed, Child[2]=DoNoiseAlert, Child[3]=TryAllCivOptions)

+Behaviors=(BehaviorName=TryAllCivOptions, NodeType=RandSelector, Child[0]=MoveRandomUnsafe, Param[0]=20, Child[1]=MoveRandom, Param[1]=20, Child[2]=MoveRandomCover, Param[2]=20, Child[3]=MoveAdvanceToCoverHeightLoSUnsafe, Param[3]=20, Child[4]=FallbackHeight, Param[4]=20 )

+Behaviors=(BehaviorName=IsMissionOfType-Defend_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsMissionOfType-Terror_LW, NodeType=Condition)
+Behaviors=(BehaviorName=IsMissionOfType-Invasion_LW, NodeType=Condition)

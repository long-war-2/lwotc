//---------------------------------------------------------------------------------------
//  FILE:    SniperDefense_UIScreenListener.uc
//  AUTHOR:  RedDobe
//  PURPOSE: Makes Enemy pods activate on missed squadsight shots
//---------------------------------------------------------------------------------------
class SniperDefense_UIScreenListener extends UIScreenListener Config(SniperDefense);

var config bool EnableMissedShotAlert;
var config float MissShotAlertChance;

event OnInit(UIScreen screen)
{
	local Object ThisObj;
	ThisObj = self;
	`XEVENTMGR.RegisterForEvent(ThisObj, 'AbilityActivated', OnAbilityActivated, ELD_OnStateSubmitted);
}

defaultProperties
{
    ScreenClass = UITacticalHUD
}

//Turns missed shots from abilities that target enemy units into a UnitAGainsKnowledgeOfUnitB alert for the targeted unit. 
//This is primarily to alert enemy units that they are being shot at by a unit from squad sight range.
function EventListenerReturn OnAbilityActivated(Object EventData, Object EventSource, XComGameState GameState, Name Event, Object CallbackData)
{
	local XComGameState_Ability ActivatedAbilityState;
	local XComGameStateContext_Ability ActivatedAbilityStateContext;
	local XComGameState_Unit SourceUnitState, TargetedUnitState;
	local XComGameState_Item WeaponState;
	local int SoundRange, nEnemiesVisible;
	local XComGameStateHistory History;
	local XComGameState_Unit ThisUnitState;
	local float Roll;

	ActivatedAbilityStateContext = XComGameStateContext_Ability(GameState.GetContext());

	// do not process concealment breaks or AI alerts during interrupt processing or if this option is disabled in the sniper defense config
	if(!EnableMissedShotAlert || ActivatedAbilityStateContext.InterruptionStatus == eInterruptionStatus_Interrupt)
	{
		return ELR_NoInterrupt;
	}

	History = `XCOMHISTORY;
	ThisUnitState = XComGameState_Unit(EventSource);
	ActivatedAbilityState = XComGameState_Ability(EventData);

	if(ActivatedAbilityState.DoesAbilityCauseSound())
	{
		if(ActivatedAbilityStateContext != None && ActivatedAbilityStateContext.InputContext.ItemObject.ObjectID > 0)
		{
			SourceUnitState = XComGameState_Unit(History.GetGameStateForObjectID(ActivatedAbilityStateContext.InputContext.SourceObject.ObjectID));
			WeaponState = XComGameState_Item(GameState.GetGameStateForObjectID(ActivatedAbilityStateContext.InputContext.ItemObject.ObjectID));
			TargetedUnitState = XComGameState_Unit(History.GetGameStateForObjectID(ActivatedAbilityStateContext.InputContext.PrimaryTarget.ObjectID));
            SoundRange = WeaponState.GetItemSoundRange();

            if(SoundRange > 0 && TargetedUnitState.ObjectID > 0 && WeaponState.SoundOriginatesFromOwnerLocation() && !SourceUnitState.ControllingPlayerIsAI())//There is a valid target and the Unit firing is player controlled
			{			
				`Log("Sniper Defense Weapon sound generated by XCom");
				nEnemiesVisible = TargetedUnitState.GetNumVisibleEnemyUnits(true, true,,,,, false);
				if(nEnemiesVisible == 0) //No visible enemies than this is a concealed spotter/sniper shot 
				{
					Roll = `SYNC_FRAND_STATIC();	
					`Log("Roll to alert unit " @TargetedUnitState.ObjectID@ " taking sniper fire from " @ SourceUnitState.ObjectID @ "using sniper defense: " @ Roll @ " < "@MissShotAlertChance);
					if(Roll < MissShotAlertChance)
					{
						ThisUnitState.UnitAGainsKnowledgeOfUnitB(TargetedUnitState, SourceUnitState, GameState, eAC_TakingFire, false);
					}
				}

			}
		}
	}
	return ELR_NoInterrupt;
}